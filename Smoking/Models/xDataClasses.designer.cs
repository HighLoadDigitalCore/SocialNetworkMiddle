#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Smoking.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Smoking")]
	public partial class DB : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCMSPage(CMSPage instance);
    partial void UpdateCMSPage(CMSPage instance);
    partial void DeleteCMSPage(CMSPage instance);
    partial void InsertCMSPageLang(CMSPageLang instance);
    partial void UpdateCMSPageLang(CMSPageLang instance);
    partial void DeleteCMSPageLang(CMSPageLang instance);
    partial void InsertSiteSetting(SiteSetting instance);
    partial void UpdateSiteSetting(SiteSetting instance);
    partial void DeleteSiteSetting(SiteSetting instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertUsersInRole(UsersInRole instance);
    partial void UpdateUsersInRole(UsersInRole instance);
    partial void DeleteUsersInRole(UsersInRole instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertMembershipData(MembershipData instance);
    partial void UpdateMembershipData(MembershipData instance);
    partial void DeleteMembershipData(MembershipData instance);
    partial void InsertMailingReplacement(MailingReplacement instance);
    partial void UpdateMailingReplacement(MailingReplacement instance);
    partial void DeleteMailingReplacement(MailingReplacement instance);
    partial void InsertLanguage(Language instance);
    partial void UpdateLanguage(Language instance);
    partial void DeleteLanguage(Language instance);
    partial void InsertPageType(PageType instance);
    partial void UpdatePageType(PageType instance);
    partial void DeletePageType(PageType instance);
    partial void InsertLabelDictionary(LabelDictionary instance);
    partial void UpdateLabelDictionary(LabelDictionary instance);
    partial void DeleteLabelDictionary(LabelDictionary instance);
    partial void InsertLabelDictionaryLang(LabelDictionaryLang instance);
    partial void UpdateLabelDictionaryLang(LabelDictionaryLang instance);
    partial void DeleteLabelDictionaryLang(LabelDictionaryLang instance);
    partial void InsertCMSPageRoleRel(CMSPageRoleRel instance);
    partial void UpdateCMSPageRoleRel(CMSPageRoleRel instance);
    partial void DeleteCMSPageRoleRel(CMSPageRoleRel instance);
    partial void InsertMailingList(MailingList instance);
    partial void UpdateMailingList(MailingList instance);
    partial void DeleteMailingList(MailingList instance);
    partial void InsertLentaComment(LentaComment instance);
    partial void UpdateLentaComment(LentaComment instance);
    partial void DeleteLentaComment(LentaComment instance);
    partial void InsertComment(Comment instance);
    partial void UpdateComment(Comment instance);
    partial void DeleteComment(Comment instance);
    partial void InsertCMSPageCellView(CMSPageCellView instance);
    partial void UpdateCMSPageCellView(CMSPageCellView instance);
    partial void DeleteCMSPageCellView(CMSPageCellView instance);
    partial void InsertLenta(Lenta instance);
    partial void UpdateLenta(Lenta instance);
    partial void DeleteLenta(Lenta instance);
    partial void InsertCMSPageCell(CMSPageCell instance);
    partial void UpdateCMSPageCell(CMSPageCell instance);
    partial void DeleteCMSPageCell(CMSPageCell instance);
    partial void InsertCMSPageTextData(CMSPageTextData instance);
    partial void UpdateCMSPageTextData(CMSPageTextData instance);
    partial void DeleteCMSPageTextData(CMSPageTextData instance);
    partial void InsertMapObjectType(MapObjectType instance);
    partial void UpdateMapObjectType(MapObjectType instance);
    partial void DeleteMapObjectType(MapObjectType instance);
    partial void InsertMapObject(MapObject instance);
    partial void UpdateMapObject(MapObject instance);
    partial void DeleteMapObject(MapObject instance);
    partial void InsertMapObjectPhoto(MapObjectPhoto instance);
    partial void UpdateMapObjectPhoto(MapObjectPhoto instance);
    partial void DeleteMapObjectPhoto(MapObjectPhoto instance);
    partial void InsertMapCoord(MapCoord instance);
    partial void UpdateMapCoord(MapCoord instance);
    partial void DeleteMapCoord(MapCoord instance);
    partial void InsertMapObjectFavorite(MapObjectFavorite instance);
    partial void UpdateMapObjectFavorite(MapObjectFavorite instance);
    partial void DeleteMapObjectFavorite(MapObjectFavorite instance);
    partial void InsertMapObjectComment(MapObjectComment instance);
    partial void UpdateMapObjectComment(MapObjectComment instance);
    partial void DeleteMapObjectComment(MapObjectComment instance);
    partial void InsertCMSPageSlider(CMSPageSlider instance);
    partial void UpdateCMSPageSlider(CMSPageSlider instance);
    partial void DeleteCMSPageSlider(CMSPageSlider instance);
    partial void InsertMapSelect(MapSelect instance);
    partial void UpdateMapSelect(MapSelect instance);
    partial void DeleteMapSelect(MapSelect instance);
    partial void InsertUserFavoriteLenta(UserFavoriteLenta instance);
    partial void UpdateUserFavoriteLenta(UserFavoriteLenta instance);
    partial void DeleteUserFavoriteLenta(UserFavoriteLenta instance);
    partial void InsertUserProfile(UserProfile instance);
    partial void UpdateUserProfile(UserProfile instance);
    partial void DeleteUserProfile(UserProfile instance);
    partial void InsertUserMessage(UserMessage instance);
    partial void UpdateUserMessage(UserMessage instance);
    partial void DeleteUserMessage(UserMessage instance);
    #endregion
		
		public DB() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["MsSqlConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DB(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DB(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DB(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DB(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CMSPage> CMSPages
		{
			get
			{
				return this.GetTable<CMSPage>();
			}
		}
		
		public System.Data.Linq.Table<CMSPageLang> CMSPageLangs
		{
			get
			{
				return this.GetTable<CMSPageLang>();
			}
		}
		
		public System.Data.Linq.Table<SiteSetting> SiteSettings
		{
			get
			{
				return this.GetTable<SiteSetting>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<UsersInRole> UsersInRoles
		{
			get
			{
				return this.GetTable<UsersInRole>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<MembershipData> MembershipDatas
		{
			get
			{
				return this.GetTable<MembershipData>();
			}
		}
		
		public System.Data.Linq.Table<MailingReplacement> MailingReplacements
		{
			get
			{
				return this.GetTable<MailingReplacement>();
			}
		}
		
		public System.Data.Linq.Table<Language> Languages
		{
			get
			{
				return this.GetTable<Language>();
			}
		}
		
		public System.Data.Linq.Table<PageType> PageTypes
		{
			get
			{
				return this.GetTable<PageType>();
			}
		}
		
		public System.Data.Linq.Table<LabelDictionary> LabelDictionaries
		{
			get
			{
				return this.GetTable<LabelDictionary>();
			}
		}
		
		public System.Data.Linq.Table<LabelDictionaryLang> LabelDictionaryLangs
		{
			get
			{
				return this.GetTable<LabelDictionaryLang>();
			}
		}
		
		public System.Data.Linq.Table<CMSPageRoleRel> CMSPageRoleRels
		{
			get
			{
				return this.GetTable<CMSPageRoleRel>();
			}
		}
		
		public System.Data.Linq.Table<MailingList> MailingLists
		{
			get
			{
				return this.GetTable<MailingList>();
			}
		}
		
		public System.Data.Linq.Table<LentaComment> LentaComments
		{
			get
			{
				return this.GetTable<LentaComment>();
			}
		}
		
		public System.Data.Linq.Table<Comment> Comments
		{
			get
			{
				return this.GetTable<Comment>();
			}
		}
		
		public System.Data.Linq.Table<CMSPageCellView> CMSPageCellViews
		{
			get
			{
				return this.GetTable<CMSPageCellView>();
			}
		}
		
		public System.Data.Linq.Table<Lenta> Lentas
		{
			get
			{
				return this.GetTable<Lenta>();
			}
		}
		
		public System.Data.Linq.Table<CMSPageCell> CMSPageCells
		{
			get
			{
				return this.GetTable<CMSPageCell>();
			}
		}
		
		public System.Data.Linq.Table<CMSPageTextData> CMSPageTextDatas
		{
			get
			{
				return this.GetTable<CMSPageTextData>();
			}
		}
		
		public System.Data.Linq.Table<MapObjectType> MapObjectTypes
		{
			get
			{
				return this.GetTable<MapObjectType>();
			}
		}
		
		public System.Data.Linq.Table<MapObject> MapObjects
		{
			get
			{
				return this.GetTable<MapObject>();
			}
		}
		
		public System.Data.Linq.Table<MapObjectPhoto> MapObjectPhotos
		{
			get
			{
				return this.GetTable<MapObjectPhoto>();
			}
		}
		
		public System.Data.Linq.Table<MapCoord> MapCoords
		{
			get
			{
				return this.GetTable<MapCoord>();
			}
		}
		
		public System.Data.Linq.Table<MapObjectFavorite> MapObjectFavorites
		{
			get
			{
				return this.GetTable<MapObjectFavorite>();
			}
		}
		
		public System.Data.Linq.Table<MapObjectComment> MapObjectComments
		{
			get
			{
				return this.GetTable<MapObjectComment>();
			}
		}
		
		public System.Data.Linq.Table<CMSPageSlider> CMSPageSliders
		{
			get
			{
				return this.GetTable<CMSPageSlider>();
			}
		}
		
		public System.Data.Linq.Table<MapSelect> MapSelects
		{
			get
			{
				return this.GetTable<MapSelect>();
			}
		}
		
		public System.Data.Linq.Table<UserFavoriteLenta> UserFavoriteLentas
		{
			get
			{
				return this.GetTable<UserFavoriteLenta>();
			}
		}
		
		public System.Data.Linq.Table<UserProfile> UserProfiles
		{
			get
			{
				return this.GetTable<UserProfile>();
			}
		}
		
		public System.Data.Linq.Table<UserMessage> UserMessages
		{
			get
			{
				return this.GetTable<UserMessage>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.getPageList", IsComposable=true)]
		public IQueryable<getPageListResult> getPageList([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(400)")] string parentURL, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> lid)
		{
			return this.CreateMethodCallQuery<getPageListResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), parentURL, lid);
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CMSPages")]
	public partial class CMSPage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _URL;
		
		private System.Nullable<int> _ParentID;
		
		private bool _Visible;
		
		private int _Type;
		
		private int _OrderNum;
		
		private bool _ViewMenu;
		
		private EntitySet<CMSPage> _CMSPages;
		
		private EntitySet<CMSPageLang> _CMSPageLangs;
		
		private EntitySet<CMSPageRoleRel> _CMSPageRoleRels;
		
		private EntitySet<Lenta> _Lentas;
		
		private EntitySet<CMSPageTextData> _CMSPageTextDatas;
		
		private EntitySet<CMSPageSlider> _CMSPageSliders;
		
		private EntityRef<CMSPage> _CMSPage1;
		
		private EntityRef<PageType> _PageType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnURLChanging(string value);
    partial void OnURLChanged();
    partial void OnParentIDChanging(System.Nullable<int> value);
    partial void OnParentIDChanged();
    partial void OnVisibleChanging(bool value);
    partial void OnVisibleChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnOrderNumChanging(int value);
    partial void OnOrderNumChanged();
    partial void OnViewMenuChanging(bool value);
    partial void OnViewMenuChanged();
    #endregion
		
		public CMSPage()
		{
			this._CMSPages = new EntitySet<CMSPage>(new Action<CMSPage>(this.attach_CMSPages), new Action<CMSPage>(this.detach_CMSPages));
			this._CMSPageLangs = new EntitySet<CMSPageLang>(new Action<CMSPageLang>(this.attach_CMSPageLangs), new Action<CMSPageLang>(this.detach_CMSPageLangs));
			this._CMSPageRoleRels = new EntitySet<CMSPageRoleRel>(new Action<CMSPageRoleRel>(this.attach_CMSPageRoleRels), new Action<CMSPageRoleRel>(this.detach_CMSPageRoleRels));
			this._Lentas = new EntitySet<Lenta>(new Action<Lenta>(this.attach_Lentas), new Action<Lenta>(this.detach_Lentas));
			this._CMSPageTextDatas = new EntitySet<CMSPageTextData>(new Action<CMSPageTextData>(this.attach_CMSPageTextDatas), new Action<CMSPageTextData>(this.detach_CMSPageTextDatas));
			this._CMSPageSliders = new EntitySet<CMSPageSlider>(new Action<CMSPageSlider>(this.attach_CMSPageSliders), new Action<CMSPageSlider>(this.detach_CMSPageSliders));
			this._CMSPage1 = default(EntityRef<CMSPage>);
			this._PageType = default(EntityRef<PageType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_URL", DbType="NVarChar(400) NOT NULL", CanBeNull=false)]
		public string URL
		{
			get
			{
				return this._URL;
			}
			set
			{
				if ((this._URL != value))
				{
					this.OnURLChanging(value);
					this.SendPropertyChanging();
					this._URL = value;
					this.SendPropertyChanged("URL");
					this.OnURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="Int")]
		public System.Nullable<int> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					if (this._CMSPage1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Visible", DbType="Bit NOT NULL")]
		public bool Visible
		{
			get
			{
				return this._Visible;
			}
			set
			{
				if ((this._Visible != value))
				{
					this.OnVisibleChanging(value);
					this.SendPropertyChanging();
					this._Visible = value;
					this.SendPropertyChanged("Visible");
					this.OnVisibleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					if (this._PageType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderNum", DbType="Int NOT NULL")]
		public int OrderNum
		{
			get
			{
				return this._OrderNum;
			}
			set
			{
				if ((this._OrderNum != value))
				{
					this.OnOrderNumChanging(value);
					this.SendPropertyChanging();
					this._OrderNum = value;
					this.SendPropertyChanged("OrderNum");
					this.OnOrderNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ViewMenu", DbType="Bit NOT NULL")]
		public bool ViewMenu
		{
			get
			{
				return this._ViewMenu;
			}
			set
			{
				if ((this._ViewMenu != value))
				{
					this.OnViewMenuChanging(value);
					this.SendPropertyChanging();
					this._ViewMenu = value;
					this.SendPropertyChanged("ViewMenu");
					this.OnViewMenuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CMSPage_CMSPage", Storage="_CMSPages", ThisKey="ID", OtherKey="ParentID")]
		public EntitySet<CMSPage> Children
		{
			get
			{
				return this._CMSPages;
			}
			set
			{
				this._CMSPages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CMSPage_CMSPageLang", Storage="_CMSPageLangs", ThisKey="ID", OtherKey="CMSPageID")]
		public EntitySet<CMSPageLang> CMSPageLangs
		{
			get
			{
				return this._CMSPageLangs;
			}
			set
			{
				this._CMSPageLangs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CMSPage_CMSPageRoleRel", Storage="_CMSPageRoleRels", ThisKey="ID", OtherKey="PageID")]
		public EntitySet<CMSPageRoleRel> CMSPageRoleRels
		{
			get
			{
				return this._CMSPageRoleRels;
			}
			set
			{
				this._CMSPageRoleRels.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CMSPage_Lenta", Storage="_Lentas", ThisKey="ID", OtherKey="PageID")]
		public EntitySet<Lenta> Lentas
		{
			get
			{
				return this._Lentas;
			}
			set
			{
				this._Lentas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CMSPage_CMSPageTextData", Storage="_CMSPageTextDatas", ThisKey="ID", OtherKey="CMSPageID")]
		public EntitySet<CMSPageTextData> CMSPageTextDatas
		{
			get
			{
				return this._CMSPageTextDatas;
			}
			set
			{
				this._CMSPageTextDatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CMSPage_CMSPageSlider", Storage="_CMSPageSliders", ThisKey="ID", OtherKey="CMSPageID")]
		public EntitySet<CMSPageSlider> CMSPageSliders
		{
			get
			{
				return this._CMSPageSliders;
			}
			set
			{
				this._CMSPageSliders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CMSPage_CMSPage", Storage="_CMSPage1", ThisKey="ParentID", OtherKey="ID", IsForeignKey=true)]
		public CMSPage Parent
		{
			get
			{
				return this._CMSPage1.Entity;
			}
			set
			{
				CMSPage previousValue = this._CMSPage1.Entity;
				if (((previousValue != value) 
							|| (this._CMSPage1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CMSPage1.Entity = null;
						previousValue.Children.Remove(this);
					}
					this._CMSPage1.Entity = value;
					if ((value != null))
					{
						value.Children.Add(this);
						this._ParentID = value.ID;
					}
					else
					{
						this._ParentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Parent");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PageType_CMSPage", Storage="_PageType", ThisKey="Type", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public PageType PageType
		{
			get
			{
				return this._PageType.Entity;
			}
			set
			{
				PageType previousValue = this._PageType.Entity;
				if (((previousValue != value) 
							|| (this._PageType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PageType.Entity = null;
						previousValue.CMSPages.Remove(this);
					}
					this._PageType.Entity = value;
					if ((value != null))
					{
						value.CMSPages.Add(this);
						this._Type = value.ID;
					}
					else
					{
						this._Type = default(int);
					}
					this.SendPropertyChanged("PageType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CMSPages(CMSPage entity)
		{
			this.SendPropertyChanging();
			entity.Parent = this;
		}
		
		private void detach_CMSPages(CMSPage entity)
		{
			this.SendPropertyChanging();
			entity.Parent = null;
		}
		
		private void attach_CMSPageLangs(CMSPageLang entity)
		{
			this.SendPropertyChanging();
			entity.CMSPage = this;
		}
		
		private void detach_CMSPageLangs(CMSPageLang entity)
		{
			this.SendPropertyChanging();
			entity.CMSPage = null;
		}
		
		private void attach_CMSPageRoleRels(CMSPageRoleRel entity)
		{
			this.SendPropertyChanging();
			entity.CMSPage = this;
		}
		
		private void detach_CMSPageRoleRels(CMSPageRoleRel entity)
		{
			this.SendPropertyChanging();
			entity.CMSPage = null;
		}
		
		private void attach_Lentas(Lenta entity)
		{
			this.SendPropertyChanging();
			entity.CMSPage = this;
		}
		
		private void detach_Lentas(Lenta entity)
		{
			this.SendPropertyChanging();
			entity.CMSPage = null;
		}
		
		private void attach_CMSPageTextDatas(CMSPageTextData entity)
		{
			this.SendPropertyChanging();
			entity.CMSPage = this;
		}
		
		private void detach_CMSPageTextDatas(CMSPageTextData entity)
		{
			this.SendPropertyChanging();
			entity.CMSPage = null;
		}
		
		private void attach_CMSPageSliders(CMSPageSlider entity)
		{
			this.SendPropertyChanging();
			entity.CMSPage = this;
		}
		
		private void detach_CMSPageSliders(CMSPageSlider entity)
		{
			this.SendPropertyChanging();
			entity.CMSPage = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CMSPageLangs")]
	public partial class CMSPageLang : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _LanguageID;
		
		private int _CMSPageID;
		
		private string _PageName;
		
		private string _Title;
		
		private string _Keywords;
		
		private string _Description;
		
		private string _FullName;
		
		private EntityRef<CMSPage> _CMSPage;
		
		private EntityRef<Language> _Language;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnLanguageIDChanging(int value);
    partial void OnLanguageIDChanged();
    partial void OnCMSPageIDChanging(int value);
    partial void OnCMSPageIDChanged();
    partial void OnPageNameChanging(string value);
    partial void OnPageNameChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnKeywordsChanging(string value);
    partial void OnKeywordsChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    #endregion
		
		public CMSPageLang()
		{
			this._CMSPage = default(EntityRef<CMSPage>);
			this._Language = default(EntityRef<Language>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageID", DbType="Int NOT NULL")]
		public int LanguageID
		{
			get
			{
				return this._LanguageID;
			}
			set
			{
				if ((this._LanguageID != value))
				{
					if (this._Language.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLanguageIDChanging(value);
					this.SendPropertyChanging();
					this._LanguageID = value;
					this.SendPropertyChanged("LanguageID");
					this.OnLanguageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CMSPageID", DbType="Int NOT NULL")]
		public int CMSPageID
		{
			get
			{
				return this._CMSPageID;
			}
			set
			{
				if ((this._CMSPageID != value))
				{
					if (this._CMSPage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCMSPageIDChanging(value);
					this.SendPropertyChanging();
					this._CMSPageID = value;
					this.SendPropertyChanged("CMSPageID");
					this.OnCMSPageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageName", DbType="NVarChar(400) NOT NULL", CanBeNull=false)]
		public string PageName
		{
			get
			{
				return this._PageName;
			}
			set
			{
				if ((this._PageName != value))
				{
					this.OnPageNameChanging(value);
					this.SendPropertyChanging();
					this._PageName = value;
					this.SendPropertyChanged("PageName");
					this.OnPageNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Keywords", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Keywords
		{
			get
			{
				return this._Keywords;
			}
			set
			{
				if ((this._Keywords != value))
				{
					this.OnKeywordsChanging(value);
					this.SendPropertyChanging();
					this._Keywords = value;
					this.SendPropertyChanged("Keywords");
					this.OnKeywordsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(400) NOT NULL", CanBeNull=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CMSPage_CMSPageLang", Storage="_CMSPage", ThisKey="CMSPageID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CMSPage CMSPage
		{
			get
			{
				return this._CMSPage.Entity;
			}
			set
			{
				CMSPage previousValue = this._CMSPage.Entity;
				if (((previousValue != value) 
							|| (this._CMSPage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CMSPage.Entity = null;
						previousValue.CMSPageLangs.Remove(this);
					}
					this._CMSPage.Entity = value;
					if ((value != null))
					{
						value.CMSPageLangs.Add(this);
						this._CMSPageID = value.ID;
					}
					else
					{
						this._CMSPageID = default(int);
					}
					this.SendPropertyChanged("CMSPage");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Language_CMSPageLang", Storage="_Language", ThisKey="LanguageID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Language Language
		{
			get
			{
				return this._Language.Entity;
			}
			set
			{
				Language previousValue = this._Language.Entity;
				if (((previousValue != value) 
							|| (this._Language.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Language.Entity = null;
						previousValue.CMSPageLangs.Remove(this);
					}
					this._Language.Entity = value;
					if ((value != null))
					{
						value.CMSPageLangs.Add(this);
						this._LanguageID = value.ID;
					}
					else
					{
						this._LanguageID = default(int);
					}
					this.SendPropertyChanged("Language");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SiteSettings")]
	public partial class SiteSetting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Setting;
		
		private string _Value;
		
		private string _Title;
		
		private int _OrderNum;
		
		private string _Editor;
		
		private string _ObjectType;
		
		private string _GroupName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSettingChanging(string value);
    partial void OnSettingChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnOrderNumChanging(int value);
    partial void OnOrderNumChanged();
    partial void OnEditorChanging(string value);
    partial void OnEditorChanged();
    partial void OnObjectTypeChanging(string value);
    partial void OnObjectTypeChanged();
    partial void OnGroupNameChanging(string value);
    partial void OnGroupNameChanged();
    #endregion
		
		public SiteSetting()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Setting", DbType="NVarChar(512) NOT NULL", CanBeNull=false)]
		public string Setting
		{
			get
			{
				return this._Setting;
			}
			set
			{
				if ((this._Setting != value))
				{
					this.OnSettingChanging(value);
					this.SendPropertyChanging();
					this._Setting = value;
					this.SendPropertyChanged("Setting");
					this.OnSettingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(512) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderNum", DbType="Int NOT NULL")]
		public int OrderNum
		{
			get
			{
				return this._OrderNum;
			}
			set
			{
				if ((this._OrderNum != value))
				{
					this.OnOrderNumChanging(value);
					this.SendPropertyChanging();
					this._OrderNum = value;
					this.SendPropertyChanged("OrderNum");
					this.OnOrderNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Editor", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Editor
		{
			get
			{
				return this._Editor;
			}
			set
			{
				if ((this._Editor != value))
				{
					this.OnEditorChanging(value);
					this.SendPropertyChanging();
					this._Editor = value;
					this.SendPropertyChanged("Editor");
					this.OnEditorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectType", DbType="NVarChar(50)")]
		public string ObjectType
		{
			get
			{
				return this._ObjectType;
			}
			set
			{
				if ((this._ObjectType != value))
				{
					this.OnObjectTypeChanging(value);
					this.SendPropertyChanging();
					this._ObjectType = value;
					this.SendPropertyChanged("ObjectType");
					this.OnObjectTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupName", DbType="NVarChar(512) NOT NULL", CanBeNull=false)]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this.OnGroupNameChanging(value);
					this.SendPropertyChanging();
					this._GroupName = value;
					this.SendPropertyChanged("GroupName");
					this.OnGroupNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _UserId;
		
		private string _UserName;
		
		private string _LoweredUserName;
		
		private string _MobileAlias;
		
		private bool _IsAnonymous;
		
		private System.DateTime _LastActivityDate;
		
		private EntitySet<UsersInRole> _UsersInRoles;
		
		private EntityRef<MembershipData> _MembershipData;
		
		private EntitySet<Comment> _Comments;
		
		private EntitySet<MapObject> _MapObjects;
		
		private EntitySet<MapObjectFavorite> _MapObjectFavorites;
		
		private EntitySet<UserFavoriteLenta> _UserFavoriteLentas;
		
		private EntityRef<UserProfile> _UserProfile;
		
		private EntitySet<UserMessage> _UserMessages;
		
		private EntitySet<UserMessage> _UserMessages1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnLoweredUserNameChanging(string value);
    partial void OnLoweredUserNameChanged();
    partial void OnMobileAliasChanging(string value);
    partial void OnMobileAliasChanged();
    partial void OnIsAnonymousChanging(bool value);
    partial void OnIsAnonymousChanged();
    partial void OnLastActivityDateChanging(System.DateTime value);
    partial void OnLastActivityDateChanged();
    #endregion
		
		public User()
		{
			this._UsersInRoles = new EntitySet<UsersInRole>(new Action<UsersInRole>(this.attach_UsersInRoles), new Action<UsersInRole>(this.detach_UsersInRoles));
			this._MembershipData = default(EntityRef<MembershipData>);
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._MapObjects = new EntitySet<MapObject>(new Action<MapObject>(this.attach_MapObjects), new Action<MapObject>(this.detach_MapObjects));
			this._MapObjectFavorites = new EntitySet<MapObjectFavorite>(new Action<MapObjectFavorite>(this.attach_MapObjectFavorites), new Action<MapObjectFavorite>(this.detach_MapObjectFavorites));
			this._UserFavoriteLentas = new EntitySet<UserFavoriteLenta>(new Action<UserFavoriteLenta>(this.attach_UserFavoriteLentas), new Action<UserFavoriteLenta>(this.detach_UserFavoriteLentas));
			this._UserProfile = default(EntityRef<UserProfile>);
			this._UserMessages = new EntitySet<UserMessage>(new Action<UserMessage>(this.attach_UserMessages), new Action<UserMessage>(this.detach_UserMessages));
			this._UserMessages1 = new EntitySet<UserMessage>(new Action<UserMessage>(this.attach_UserMessages1), new Action<UserMessage>(this.detach_UserMessages1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoweredUserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string LoweredUserName
		{
			get
			{
				return this._LoweredUserName;
			}
			set
			{
				if ((this._LoweredUserName != value))
				{
					this.OnLoweredUserNameChanging(value);
					this.SendPropertyChanging();
					this._LoweredUserName = value;
					this.SendPropertyChanged("LoweredUserName");
					this.OnLoweredUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobileAlias", DbType="NVarChar(16)")]
		public string MobileAlias
		{
			get
			{
				return this._MobileAlias;
			}
			set
			{
				if ((this._MobileAlias != value))
				{
					this.OnMobileAliasChanging(value);
					this.SendPropertyChanging();
					this._MobileAlias = value;
					this.SendPropertyChanged("MobileAlias");
					this.OnMobileAliasChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAnonymous", DbType="Bit NOT NULL")]
		public bool IsAnonymous
		{
			get
			{
				return this._IsAnonymous;
			}
			set
			{
				if ((this._IsAnonymous != value))
				{
					this.OnIsAnonymousChanging(value);
					this.SendPropertyChanging();
					this._IsAnonymous = value;
					this.SendPropertyChanged("IsAnonymous");
					this.OnIsAnonymousChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastActivityDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastActivityDate
		{
			get
			{
				return this._LastActivityDate;
			}
			set
			{
				if ((this._LastActivityDate != value))
				{
					this.OnLastActivityDateChanging(value);
					this.SendPropertyChanging();
					this._LastActivityDate = value;
					this.SendPropertyChanged("LastActivityDate");
					this.OnLastActivityDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UsersInRole", Storage="_UsersInRoles", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<UsersInRole> UsersInRoles
		{
			get
			{
				return this._UsersInRoles;
			}
			set
			{
				this._UsersInRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_MembershipData", Storage="_MembershipData", ThisKey="UserId", OtherKey="UserId", IsUnique=true, IsForeignKey=false)]
		public MembershipData MembershipData
		{
			get
			{
				return this._MembershipData.Entity;
			}
			set
			{
				MembershipData previousValue = this._MembershipData.Entity;
				if (((previousValue != value) 
							|| (this._MembershipData.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MembershipData.Entity = null;
						previousValue.User = null;
					}
					this._MembershipData.Entity = value;
					if ((value != null))
					{
						value.User = this;
					}
					this.SendPropertyChanged("MembershipData");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Comment", Storage="_Comments", ThisKey="UserId", OtherKey="UserID")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_MapObject", Storage="_MapObjects", ThisKey="UserId", OtherKey="CreatorID")]
		public EntitySet<MapObject> MapObjects
		{
			get
			{
				return this._MapObjects;
			}
			set
			{
				this._MapObjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_MapObjectFavorite", Storage="_MapObjectFavorites", ThisKey="UserId", OtherKey="UserID")]
		public EntitySet<MapObjectFavorite> MapObjectFavorites
		{
			get
			{
				return this._MapObjectFavorites;
			}
			set
			{
				this._MapObjectFavorites.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserFavoriteLenta", Storage="_UserFavoriteLentas", ThisKey="UserId", OtherKey="UserID")]
		public EntitySet<UserFavoriteLenta> UserFavoriteLentas
		{
			get
			{
				return this._UserFavoriteLentas;
			}
			set
			{
				this._UserFavoriteLentas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserProfile", Storage="_UserProfile", ThisKey="UserId", OtherKey="UserID", IsUnique=true, IsForeignKey=false)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.User = null;
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.User = this;
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserMessage", Storage="_UserMessages", ThisKey="UserId", OtherKey="UserID")]
		public EntitySet<UserMessage> IncomingMessages
		{
			get
			{
				return this._UserMessages;
			}
			set
			{
				this._UserMessages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserMessage1", Storage="_UserMessages1", ThisKey="UserId", OtherKey="Sender")]
		public EntitySet<UserMessage> OutcomingMessages
		{
			get
			{
				return this._UserMessages1;
			}
			set
			{
				this._UserMessages1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UsersInRoles(UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UsersInRoles(UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_MapObjects(MapObject entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_MapObjects(MapObject entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_MapObjectFavorites(MapObjectFavorite entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_MapObjectFavorites(MapObjectFavorite entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserFavoriteLentas(UserFavoriteLenta entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserFavoriteLentas(UserFavoriteLenta entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserMessages(UserMessage entity)
		{
			this.SendPropertyChanging();
			entity.Recipient = this;
		}
		
		private void detach_UserMessages(UserMessage entity)
		{
			this.SendPropertyChanging();
			entity.Recipient = null;
		}
		
		private void attach_UserMessages1(UserMessage entity)
		{
			this.SendPropertyChanging();
			entity.Poster = this;
		}
		
		private void detach_UserMessages1(UserMessage entity)
		{
			this.SendPropertyChanging();
			entity.Poster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_UsersInRoles")]
	public partial class UsersInRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserId;
		
		private System.Guid _RoleId;
		
		private EntityRef<User> _User;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnRoleIdChanging(System.Guid value);
    partial void OnRoleIdChanged();
    #endregion
		
		public UsersInRole()
		{
			this._User = default(EntityRef<User>);
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UsersInRole", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UsersInRoles.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UsersInRoles.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UsersInRole", Storage="_Role", ThisKey="RoleId", OtherKey="RoleId", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.UsersInRoles.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.UsersInRoles.Add(this);
						this._RoleId = value.RoleId;
					}
					else
					{
						this._RoleId = default(System.Guid);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_Roles")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _RoleId;
		
		private string _RoleName;
		
		private string _LoweredRoleName;
		
		private string _Description;
		
		private EntitySet<UsersInRole> _UsersInRoles;
		
		private EntitySet<CMSPageRoleRel> _CMSPageRoleRels;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnRoleIdChanging(System.Guid value);
    partial void OnRoleIdChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    partial void OnLoweredRoleNameChanging(string value);
    partial void OnLoweredRoleNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Role()
		{
			this._UsersInRoles = new EntitySet<UsersInRole>(new Action<UsersInRole>(this.attach_UsersInRoles), new Action<UsersInRole>(this.detach_UsersInRoles));
			this._CMSPageRoleRels = new EntitySet<CMSPageRoleRel>(new Action<CMSPageRoleRel>(this.attach_CMSPageRoleRels), new Action<CMSPageRoleRel>(this.detach_CMSPageRoleRels));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoweredRoleName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string LoweredRoleName
		{
			get
			{
				return this._LoweredRoleName;
			}
			set
			{
				if ((this._LoweredRoleName != value))
				{
					this.OnLoweredRoleNameChanging(value);
					this.SendPropertyChanging();
					this._LoweredRoleName = value;
					this.SendPropertyChanged("LoweredRoleName");
					this.OnLoweredRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(256)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UsersInRole", Storage="_UsersInRoles", ThisKey="RoleId", OtherKey="RoleId")]
		public EntitySet<UsersInRole> UsersInRoles
		{
			get
			{
				return this._UsersInRoles;
			}
			set
			{
				this._UsersInRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_CMSPageRoleRel", Storage="_CMSPageRoleRels", ThisKey="RoleId", OtherKey="RoleID")]
		public EntitySet<CMSPageRoleRel> CMSPageRoleRels
		{
			get
			{
				return this._CMSPageRoleRels;
			}
			set
			{
				this._CMSPageRoleRels.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UsersInRoles(UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_UsersInRoles(UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
		
		private void attach_CMSPageRoleRels(CMSPageRoleRel entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_CMSPageRoleRels(CMSPageRoleRel entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_Membership")]
	public partial class MembershipData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _UserId;
		
		private string _Password;
		
		private int _PasswordFormat;
		
		private string _PasswordSalt;
		
		private string _MobilePIN;
		
		private string _Email;
		
		private string _LoweredEmail;
		
		private string _PasswordQuestion;
		
		private string _PasswordAnswer;
		
		private bool _IsApproved;
		
		private bool _IsLockedOut;
		
		private System.DateTime _CreateDate;
		
		private System.DateTime _LastLoginDate;
		
		private System.DateTime _LastPasswordChangedDate;
		
		private System.DateTime _LastLockoutDate;
		
		private int _FailedPasswordAttemptCount;
		
		private System.DateTime _FailedPasswordAttemptWindowStart;
		
		private int _FailedPasswordAnswerAttemptCount;
		
		private System.DateTime _FailedPasswordAnswerAttemptWindowStart;
		
		private string _Comment;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnPasswordFormatChanging(int value);
    partial void OnPasswordFormatChanged();
    partial void OnPasswordSaltChanging(string value);
    partial void OnPasswordSaltChanged();
    partial void OnMobilePINChanging(string value);
    partial void OnMobilePINChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnLoweredEmailChanging(string value);
    partial void OnLoweredEmailChanged();
    partial void OnPasswordQuestionChanging(string value);
    partial void OnPasswordQuestionChanged();
    partial void OnPasswordAnswerChanging(string value);
    partial void OnPasswordAnswerChanged();
    partial void OnIsApprovedChanging(bool value);
    partial void OnIsApprovedChanged();
    partial void OnIsLockedOutChanging(bool value);
    partial void OnIsLockedOutChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnLastLoginDateChanging(System.DateTime value);
    partial void OnLastLoginDateChanged();
    partial void OnLastPasswordChangedDateChanging(System.DateTime value);
    partial void OnLastPasswordChangedDateChanged();
    partial void OnLastLockoutDateChanging(System.DateTime value);
    partial void OnLastLockoutDateChanged();
    partial void OnFailedPasswordAttemptCountChanging(int value);
    partial void OnFailedPasswordAttemptCountChanged();
    partial void OnFailedPasswordAttemptWindowStartChanging(System.DateTime value);
    partial void OnFailedPasswordAttemptWindowStartChanged();
    partial void OnFailedPasswordAnswerAttemptCountChanging(int value);
    partial void OnFailedPasswordAnswerAttemptCountChanged();
    partial void OnFailedPasswordAnswerAttemptWindowStartChanging(System.DateTime value);
    partial void OnFailedPasswordAnswerAttemptWindowStartChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
		
		public MembershipData()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordFormat", DbType="Int NOT NULL")]
		public int PasswordFormat
		{
			get
			{
				return this._PasswordFormat;
			}
			set
			{
				if ((this._PasswordFormat != value))
				{
					this.OnPasswordFormatChanging(value);
					this.SendPropertyChanging();
					this._PasswordFormat = value;
					this.SendPropertyChanged("PasswordFormat");
					this.OnPasswordFormatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordSalt", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string PasswordSalt
		{
			get
			{
				return this._PasswordSalt;
			}
			set
			{
				if ((this._PasswordSalt != value))
				{
					this.OnPasswordSaltChanging(value);
					this.SendPropertyChanging();
					this._PasswordSalt = value;
					this.SendPropertyChanged("PasswordSalt");
					this.OnPasswordSaltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobilePIN", DbType="NVarChar(16)")]
		public string MobilePIN
		{
			get
			{
				return this._MobilePIN;
			}
			set
			{
				if ((this._MobilePIN != value))
				{
					this.OnMobilePINChanging(value);
					this.SendPropertyChanging();
					this._MobilePIN = value;
					this.SendPropertyChanged("MobilePIN");
					this.OnMobilePINChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(256)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoweredEmail", DbType="NVarChar(256)")]
		public string LoweredEmail
		{
			get
			{
				return this._LoweredEmail;
			}
			set
			{
				if ((this._LoweredEmail != value))
				{
					this.OnLoweredEmailChanging(value);
					this.SendPropertyChanging();
					this._LoweredEmail = value;
					this.SendPropertyChanged("LoweredEmail");
					this.OnLoweredEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordQuestion", DbType="NVarChar(256)")]
		public string PasswordQuestion
		{
			get
			{
				return this._PasswordQuestion;
			}
			set
			{
				if ((this._PasswordQuestion != value))
				{
					this.OnPasswordQuestionChanging(value);
					this.SendPropertyChanging();
					this._PasswordQuestion = value;
					this.SendPropertyChanged("PasswordQuestion");
					this.OnPasswordQuestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordAnswer", DbType="NVarChar(128)")]
		public string PasswordAnswer
		{
			get
			{
				return this._PasswordAnswer;
			}
			set
			{
				if ((this._PasswordAnswer != value))
				{
					this.OnPasswordAnswerChanging(value);
					this.SendPropertyChanging();
					this._PasswordAnswer = value;
					this.SendPropertyChanged("PasswordAnswer");
					this.OnPasswordAnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsApproved", DbType="Bit NOT NULL")]
		public bool IsApproved
		{
			get
			{
				return this._IsApproved;
			}
			set
			{
				if ((this._IsApproved != value))
				{
					this.OnIsApprovedChanging(value);
					this.SendPropertyChanging();
					this._IsApproved = value;
					this.SendPropertyChanged("IsApproved");
					this.OnIsApprovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLockedOut", DbType="Bit NOT NULL")]
		public bool IsLockedOut
		{
			get
			{
				return this._IsLockedOut;
			}
			set
			{
				if ((this._IsLockedOut != value))
				{
					this.OnIsLockedOutChanging(value);
					this.SendPropertyChanging();
					this._IsLockedOut = value;
					this.SendPropertyChanged("IsLockedOut");
					this.OnIsLockedOutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastLoginDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastLoginDate
		{
			get
			{
				return this._LastLoginDate;
			}
			set
			{
				if ((this._LastLoginDate != value))
				{
					this.OnLastLoginDateChanging(value);
					this.SendPropertyChanging();
					this._LastLoginDate = value;
					this.SendPropertyChanged("LastLoginDate");
					this.OnLastLoginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastPasswordChangedDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastPasswordChangedDate
		{
			get
			{
				return this._LastPasswordChangedDate;
			}
			set
			{
				if ((this._LastPasswordChangedDate != value))
				{
					this.OnLastPasswordChangedDateChanging(value);
					this.SendPropertyChanging();
					this._LastPasswordChangedDate = value;
					this.SendPropertyChanged("LastPasswordChangedDate");
					this.OnLastPasswordChangedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastLockoutDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastLockoutDate
		{
			get
			{
				return this._LastLockoutDate;
			}
			set
			{
				if ((this._LastLockoutDate != value))
				{
					this.OnLastLockoutDateChanging(value);
					this.SendPropertyChanging();
					this._LastLockoutDate = value;
					this.SendPropertyChanged("LastLockoutDate");
					this.OnLastLockoutDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FailedPasswordAttemptCount", DbType="Int NOT NULL")]
		public int FailedPasswordAttemptCount
		{
			get
			{
				return this._FailedPasswordAttemptCount;
			}
			set
			{
				if ((this._FailedPasswordAttemptCount != value))
				{
					this.OnFailedPasswordAttemptCountChanging(value);
					this.SendPropertyChanging();
					this._FailedPasswordAttemptCount = value;
					this.SendPropertyChanged("FailedPasswordAttemptCount");
					this.OnFailedPasswordAttemptCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FailedPasswordAttemptWindowStart", DbType="DateTime NOT NULL")]
		public System.DateTime FailedPasswordAttemptWindowStart
		{
			get
			{
				return this._FailedPasswordAttemptWindowStart;
			}
			set
			{
				if ((this._FailedPasswordAttemptWindowStart != value))
				{
					this.OnFailedPasswordAttemptWindowStartChanging(value);
					this.SendPropertyChanging();
					this._FailedPasswordAttemptWindowStart = value;
					this.SendPropertyChanged("FailedPasswordAttemptWindowStart");
					this.OnFailedPasswordAttemptWindowStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FailedPasswordAnswerAttemptCount", DbType="Int NOT NULL")]
		public int FailedPasswordAnswerAttemptCount
		{
			get
			{
				return this._FailedPasswordAnswerAttemptCount;
			}
			set
			{
				if ((this._FailedPasswordAnswerAttemptCount != value))
				{
					this.OnFailedPasswordAnswerAttemptCountChanging(value);
					this.SendPropertyChanging();
					this._FailedPasswordAnswerAttemptCount = value;
					this.SendPropertyChanged("FailedPasswordAnswerAttemptCount");
					this.OnFailedPasswordAnswerAttemptCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FailedPasswordAnswerAttemptWindowStart", DbType="DateTime NOT NULL")]
		public System.DateTime FailedPasswordAnswerAttemptWindowStart
		{
			get
			{
				return this._FailedPasswordAnswerAttemptWindowStart;
			}
			set
			{
				if ((this._FailedPasswordAnswerAttemptWindowStart != value))
				{
					this.OnFailedPasswordAnswerAttemptWindowStartChanging(value);
					this.SendPropertyChanging();
					this._FailedPasswordAnswerAttemptWindowStart = value;
					this.SendPropertyChanged("FailedPasswordAnswerAttemptWindowStart");
					this.OnFailedPasswordAnswerAttemptWindowStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_MembershipData", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.MembershipData = null;
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.MembershipData = this;
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MailingReplacements")]
	public partial class MailingReplacement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Replacement;
		
		private string _Description;
		
		private int _MailingID;
		
		private EntityRef<MailingList> _MailingList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnReplacementChanging(string value);
    partial void OnReplacementChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnMailingIDChanging(int value);
    partial void OnMailingIDChanged();
    #endregion
		
		public MailingReplacement()
		{
			this._MailingList = default(EntityRef<MailingList>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Replacement", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Replacement
		{
			get
			{
				return this._Replacement;
			}
			set
			{
				if ((this._Replacement != value))
				{
					this.OnReplacementChanging(value);
					this.SendPropertyChanging();
					this._Replacement = value;
					this.SendPropertyChanged("Replacement");
					this.OnReplacementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(400) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MailingID", DbType="Int NOT NULL")]
		public int MailingID
		{
			get
			{
				return this._MailingID;
			}
			set
			{
				if ((this._MailingID != value))
				{
					if (this._MailingList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMailingIDChanging(value);
					this.SendPropertyChanging();
					this._MailingID = value;
					this.SendPropertyChanged("MailingID");
					this.OnMailingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MailingList_MailingReplacement", Storage="_MailingList", ThisKey="MailingID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MailingList MailingList
		{
			get
			{
				return this._MailingList.Entity;
			}
			set
			{
				MailingList previousValue = this._MailingList.Entity;
				if (((previousValue != value) 
							|| (this._MailingList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MailingList.Entity = null;
						previousValue.MailingReplacements.Remove(this);
					}
					this._MailingList.Entity = value;
					if ((value != null))
					{
						value.MailingReplacements.Add(this);
						this._MailingID = value.ID;
					}
					else
					{
						this._MailingID = default(int);
					}
					this.SendPropertyChanged("MailingList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Languages")]
	public partial class Language : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _ShortName;
		
		private string _Name;
		
		private System.Data.Linq.Binary _Icon;
		
		private bool _Enabled;
		
		private bool _ByDef;
		
		private int _Ordernum;
		
		private EntitySet<CMSPageLang> _CMSPageLangs;
		
		private EntitySet<LabelDictionaryLang> _LabelDictionaryLangs;
		
		private EntitySet<CMSPageTextData> _CMSPageTextDatas;
		
		private EntitySet<CMSPageSlider> _CMSPageSliders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnShortNameChanging(string value);
    partial void OnShortNameChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIconChanging(System.Data.Linq.Binary value);
    partial void OnIconChanged();
    partial void OnEnabledChanging(bool value);
    partial void OnEnabledChanged();
    partial void OnByDefChanging(bool value);
    partial void OnByDefChanged();
    partial void OnOrdernumChanging(int value);
    partial void OnOrdernumChanged();
    #endregion
		
		public Language()
		{
			this._CMSPageLangs = new EntitySet<CMSPageLang>(new Action<CMSPageLang>(this.attach_CMSPageLangs), new Action<CMSPageLang>(this.detach_CMSPageLangs));
			this._LabelDictionaryLangs = new EntitySet<LabelDictionaryLang>(new Action<LabelDictionaryLang>(this.attach_LabelDictionaryLangs), new Action<LabelDictionaryLang>(this.detach_LabelDictionaryLangs));
			this._CMSPageTextDatas = new EntitySet<CMSPageTextData>(new Action<CMSPageTextData>(this.attach_CMSPageTextDatas), new Action<CMSPageTextData>(this.detach_CMSPageTextDatas));
			this._CMSPageSliders = new EntitySet<CMSPageSlider>(new Action<CMSPageSlider>(this.attach_CMSPageSliders), new Action<CMSPageSlider>(this.detach_CMSPageSliders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortName", DbType="NVarChar(2) NOT NULL", CanBeNull=false)]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Icon", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Icon
		{
			get
			{
				return this._Icon;
			}
			set
			{
				if ((this._Icon != value))
				{
					this.OnIconChanging(value);
					this.SendPropertyChanging();
					this._Icon = value;
					this.SendPropertyChanged("Icon");
					this.OnIconChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enabled", DbType="Bit NOT NULL")]
		public bool Enabled
		{
			get
			{
				return this._Enabled;
			}
			set
			{
				if ((this._Enabled != value))
				{
					this.OnEnabledChanging(value);
					this.SendPropertyChanging();
					this._Enabled = value;
					this.SendPropertyChanged("Enabled");
					this.OnEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ByDef", DbType="Bit NOT NULL")]
		public bool ByDef
		{
			get
			{
				return this._ByDef;
			}
			set
			{
				if ((this._ByDef != value))
				{
					this.OnByDefChanging(value);
					this.SendPropertyChanging();
					this._ByDef = value;
					this.SendPropertyChanged("ByDef");
					this.OnByDefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ordernum", DbType="Int NOT NULL")]
		public int Ordernum
		{
			get
			{
				return this._Ordernum;
			}
			set
			{
				if ((this._Ordernum != value))
				{
					this.OnOrdernumChanging(value);
					this.SendPropertyChanging();
					this._Ordernum = value;
					this.SendPropertyChanged("Ordernum");
					this.OnOrdernumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Language_CMSPageLang", Storage="_CMSPageLangs", ThisKey="ID", OtherKey="LanguageID")]
		public EntitySet<CMSPageLang> CMSPageLangs
		{
			get
			{
				return this._CMSPageLangs;
			}
			set
			{
				this._CMSPageLangs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Language_LabelDictionaryLang", Storage="_LabelDictionaryLangs", ThisKey="ID", OtherKey="LanguageID")]
		public EntitySet<LabelDictionaryLang> LabelDictionaryLangs
		{
			get
			{
				return this._LabelDictionaryLangs;
			}
			set
			{
				this._LabelDictionaryLangs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Language_CMSPageTextData", Storage="_CMSPageTextDatas", ThisKey="ID", OtherKey="LangID")]
		public EntitySet<CMSPageTextData> CMSPageTextDatas
		{
			get
			{
				return this._CMSPageTextDatas;
			}
			set
			{
				this._CMSPageTextDatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Language_CMSPageSlider", Storage="_CMSPageSliders", ThisKey="ID", OtherKey="LangID")]
		public EntitySet<CMSPageSlider> CMSPageSliders
		{
			get
			{
				return this._CMSPageSliders;
			}
			set
			{
				this._CMSPageSliders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CMSPageLangs(CMSPageLang entity)
		{
			this.SendPropertyChanging();
			entity.Language = this;
		}
		
		private void detach_CMSPageLangs(CMSPageLang entity)
		{
			this.SendPropertyChanging();
			entity.Language = null;
		}
		
		private void attach_LabelDictionaryLangs(LabelDictionaryLang entity)
		{
			this.SendPropertyChanging();
			entity.Language = this;
		}
		
		private void detach_LabelDictionaryLangs(LabelDictionaryLang entity)
		{
			this.SendPropertyChanging();
			entity.Language = null;
		}
		
		private void attach_CMSPageTextDatas(CMSPageTextData entity)
		{
			this.SendPropertyChanging();
			entity.Language = this;
		}
		
		private void detach_CMSPageTextDatas(CMSPageTextData entity)
		{
			this.SendPropertyChanging();
			entity.Language = null;
		}
		
		private void attach_CMSPageSliders(CMSPageSlider entity)
		{
			this.SendPropertyChanging();
			entity.Language = this;
		}
		
		private void detach_CMSPageSliders(CMSPageSlider entity)
		{
			this.SendPropertyChanging();
			entity.Language = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CMSPageTypes")]
	public partial class PageType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _TypeName;
		
		private string _Description;
		
		private int _Ordernum;
		
		private EntitySet<CMSPage> _CMSPages;
		
		private EntitySet<CMSPageCell> _CMSPageCells;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnOrdernumChanging(int value);
    partial void OnOrdernumChanged();
    #endregion
		
		public PageType()
		{
			this._CMSPages = new EntitySet<CMSPage>(new Action<CMSPage>(this.attach_CMSPages), new Action<CMSPage>(this.detach_CMSPages));
			this._CMSPageCells = new EntitySet<CMSPageCell>(new Action<CMSPageCell>(this.attach_CMSPageCells), new Action<CMSPageCell>(this.detach_CMSPageCells));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(512) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ordernum", DbType="Int NOT NULL")]
		public int Ordernum
		{
			get
			{
				return this._Ordernum;
			}
			set
			{
				if ((this._Ordernum != value))
				{
					this.OnOrdernumChanging(value);
					this.SendPropertyChanging();
					this._Ordernum = value;
					this.SendPropertyChanged("Ordernum");
					this.OnOrdernumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PageType_CMSPage", Storage="_CMSPages", ThisKey="ID", OtherKey="Type")]
		public EntitySet<CMSPage> CMSPages
		{
			get
			{
				return this._CMSPages;
			}
			set
			{
				this._CMSPages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PageType_CMSPageCell", Storage="_CMSPageCells", ThisKey="ID", OtherKey="TypeID")]
		public EntitySet<CMSPageCell> CMSPageCells
		{
			get
			{
				return this._CMSPageCells;
			}
			set
			{
				this._CMSPageCells.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CMSPages(CMSPage entity)
		{
			this.SendPropertyChanging();
			entity.PageType = this;
		}
		
		private void detach_CMSPages(CMSPage entity)
		{
			this.SendPropertyChanging();
			entity.PageType = null;
		}
		
		private void attach_CMSPageCells(CMSPageCell entity)
		{
			this.SendPropertyChanging();
			entity.PageType = this;
		}
		
		private void detach_CMSPageCells(CMSPageCell entity)
		{
			this.SendPropertyChanging();
			entity.PageType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LabelDictionary")]
	public partial class LabelDictionary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _TextKey;
		
		private EntitySet<LabelDictionaryLang> _LabelDictionaryLangs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTextKeyChanging(string value);
    partial void OnTextKeyChanged();
    #endregion
		
		public LabelDictionary()
		{
			this._LabelDictionaryLangs = new EntitySet<LabelDictionaryLang>(new Action<LabelDictionaryLang>(this.attach_LabelDictionaryLangs), new Action<LabelDictionaryLang>(this.detach_LabelDictionaryLangs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TextKey", DbType="NVarChar(400) NOT NULL", CanBeNull=false)]
		public string TextKey
		{
			get
			{
				return this._TextKey;
			}
			set
			{
				if ((this._TextKey != value))
				{
					this.OnTextKeyChanging(value);
					this.SendPropertyChanging();
					this._TextKey = value;
					this.SendPropertyChanged("TextKey");
					this.OnTextKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LabelDictionary_LabelDictionaryLang", Storage="_LabelDictionaryLangs", ThisKey="ID", OtherKey="LabelID")]
		public EntitySet<LabelDictionaryLang> LabelDictionaryLangs
		{
			get
			{
				return this._LabelDictionaryLangs;
			}
			set
			{
				this._LabelDictionaryLangs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LabelDictionaryLangs(LabelDictionaryLang entity)
		{
			this.SendPropertyChanging();
			entity.LabelDictionary = this;
		}
		
		private void detach_LabelDictionaryLangs(LabelDictionaryLang entity)
		{
			this.SendPropertyChanging();
			entity.LabelDictionary = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LabelDictionaryLangs")]
	public partial class LabelDictionaryLang : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _TranslatedLabel;
		
		private int _LabelID;
		
		private int _LanguageID;
		
		private EntityRef<LabelDictionary> _LabelDictionary;
		
		private EntityRef<Language> _Language;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTranslatedLabelChanging(string value);
    partial void OnTranslatedLabelChanged();
    partial void OnLabelIDChanging(int value);
    partial void OnLabelIDChanged();
    partial void OnLanguageIDChanging(int value);
    partial void OnLanguageIDChanged();
    #endregion
		
		public LabelDictionaryLang()
		{
			this._LabelDictionary = default(EntityRef<LabelDictionary>);
			this._Language = default(EntityRef<Language>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TranslatedLabel", DbType="NVarChar(400) NOT NULL", CanBeNull=false)]
		public string TranslatedLabel
		{
			get
			{
				return this._TranslatedLabel;
			}
			set
			{
				if ((this._TranslatedLabel != value))
				{
					this.OnTranslatedLabelChanging(value);
					this.SendPropertyChanging();
					this._TranslatedLabel = value;
					this.SendPropertyChanged("TranslatedLabel");
					this.OnTranslatedLabelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabelID", DbType="Int NOT NULL")]
		public int LabelID
		{
			get
			{
				return this._LabelID;
			}
			set
			{
				if ((this._LabelID != value))
				{
					if (this._LabelDictionary.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLabelIDChanging(value);
					this.SendPropertyChanging();
					this._LabelID = value;
					this.SendPropertyChanged("LabelID");
					this.OnLabelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageID", DbType="Int NOT NULL")]
		public int LanguageID
		{
			get
			{
				return this._LanguageID;
			}
			set
			{
				if ((this._LanguageID != value))
				{
					if (this._Language.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLanguageIDChanging(value);
					this.SendPropertyChanging();
					this._LanguageID = value;
					this.SendPropertyChanged("LanguageID");
					this.OnLanguageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LabelDictionary_LabelDictionaryLang", Storage="_LabelDictionary", ThisKey="LabelID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public LabelDictionary LabelDictionary
		{
			get
			{
				return this._LabelDictionary.Entity;
			}
			set
			{
				LabelDictionary previousValue = this._LabelDictionary.Entity;
				if (((previousValue != value) 
							|| (this._LabelDictionary.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LabelDictionary.Entity = null;
						previousValue.LabelDictionaryLangs.Remove(this);
					}
					this._LabelDictionary.Entity = value;
					if ((value != null))
					{
						value.LabelDictionaryLangs.Add(this);
						this._LabelID = value.ID;
					}
					else
					{
						this._LabelID = default(int);
					}
					this.SendPropertyChanged("LabelDictionary");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Language_LabelDictionaryLang", Storage="_Language", ThisKey="LanguageID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Language Language
		{
			get
			{
				return this._Language.Entity;
			}
			set
			{
				Language previousValue = this._Language.Entity;
				if (((previousValue != value) 
							|| (this._Language.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Language.Entity = null;
						previousValue.LabelDictionaryLangs.Remove(this);
					}
					this._Language.Entity = value;
					if ((value != null))
					{
						value.LabelDictionaryLangs.Add(this);
						this._LanguageID = value.ID;
					}
					else
					{
						this._LanguageID = default(int);
					}
					this.SendPropertyChanged("Language");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CMSPageRoleRels")]
	public partial class CMSPageRoleRel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PageID;
		
		private System.Nullable<System.Guid> _RoleID;
		
		private EntityRef<Role> _Role;
		
		private EntityRef<CMSPage> _CMSPage;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPageIDChanging(int value);
    partial void OnPageIDChanged();
    partial void OnRoleIDChanging(System.Nullable<System.Guid> value);
    partial void OnRoleIDChanged();
    #endregion
		
		public CMSPageRoleRel()
		{
			this._Role = default(EntityRef<Role>);
			this._CMSPage = default(EntityRef<CMSPage>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageID", DbType="Int NOT NULL")]
		public int PageID
		{
			get
			{
				return this._PageID;
			}
			set
			{
				if ((this._PageID != value))
				{
					if (this._CMSPage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPageIDChanging(value);
					this.SendPropertyChanging();
					this._PageID = value;
					this.SendPropertyChanged("PageID");
					this.OnPageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_CMSPageRoleRel", Storage="_Role", ThisKey="RoleID", OtherKey="RoleId", IsForeignKey=true, DeleteRule="CASCADE")]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.CMSPageRoleRels.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.CMSPageRoleRels.Add(this);
						this._RoleID = value.RoleId;
					}
					else
					{
						this._RoleID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CMSPage_CMSPageRoleRel", Storage="_CMSPage", ThisKey="PageID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CMSPage CMSPage
		{
			get
			{
				return this._CMSPage.Entity;
			}
			set
			{
				CMSPage previousValue = this._CMSPage.Entity;
				if (((previousValue != value) 
							|| (this._CMSPage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CMSPage.Entity = null;
						previousValue.CMSPageRoleRels.Remove(this);
					}
					this._CMSPage.Entity = value;
					if ((value != null))
					{
						value.CMSPageRoleRels.Add(this);
						this._PageID = value.ID;
					}
					else
					{
						this._PageID = default(int);
					}
					this.SendPropertyChanged("CMSPage");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MailingList")]
	public partial class MailingList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Header;
		
		private string _Letter;
		
		private string _LetterKey;
		
		private string _Name;
		
		private bool _IsForAdmin;
		
		private string _TargetMail;
		
		private bool _Enabled;
		
		private EntitySet<MailingReplacement> _MailingReplacements;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnHeaderChanging(string value);
    partial void OnHeaderChanged();
    partial void OnLetterChanging(string value);
    partial void OnLetterChanged();
    partial void OnLetterKeyChanging(string value);
    partial void OnLetterKeyChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIsForAdminChanging(bool value);
    partial void OnIsForAdminChanged();
    partial void OnTargetMailChanging(string value);
    partial void OnTargetMailChanged();
    partial void OnEnabledChanging(bool value);
    partial void OnEnabledChanged();
    #endregion
		
		public MailingList()
		{
			this._MailingReplacements = new EntitySet<MailingReplacement>(new Action<MailingReplacement>(this.attach_MailingReplacements), new Action<MailingReplacement>(this.detach_MailingReplacements));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Header", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Header
		{
			get
			{
				return this._Header;
			}
			set
			{
				if ((this._Header != value))
				{
					this.OnHeaderChanging(value);
					this.SendPropertyChanging();
					this._Header = value;
					this.SendPropertyChanged("Header");
					this.OnHeaderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Letter", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Letter
		{
			get
			{
				return this._Letter;
			}
			set
			{
				if ((this._Letter != value))
				{
					this.OnLetterChanging(value);
					this.SendPropertyChanging();
					this._Letter = value;
					this.SendPropertyChanged("Letter");
					this.OnLetterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LetterKey", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LetterKey
		{
			get
			{
				return this._LetterKey;
			}
			set
			{
				if ((this._LetterKey != value))
				{
					this.OnLetterKeyChanging(value);
					this.SendPropertyChanging();
					this._LetterKey = value;
					this.SendPropertyChanged("LetterKey");
					this.OnLetterKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(400) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsForAdmin", DbType="Bit NOT NULL")]
		public bool IsForAdmin
		{
			get
			{
				return this._IsForAdmin;
			}
			set
			{
				if ((this._IsForAdmin != value))
				{
					this.OnIsForAdminChanging(value);
					this.SendPropertyChanging();
					this._IsForAdmin = value;
					this.SendPropertyChanged("IsForAdmin");
					this.OnIsForAdminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TargetMail", DbType="NVarChar(1000)")]
		public string TargetMail
		{
			get
			{
				return this._TargetMail;
			}
			set
			{
				if ((this._TargetMail != value))
				{
					this.OnTargetMailChanging(value);
					this.SendPropertyChanging();
					this._TargetMail = value;
					this.SendPropertyChanged("TargetMail");
					this.OnTargetMailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enabled", DbType="Bit NOT NULL")]
		public bool Enabled
		{
			get
			{
				return this._Enabled;
			}
			set
			{
				if ((this._Enabled != value))
				{
					this.OnEnabledChanging(value);
					this.SendPropertyChanging();
					this._Enabled = value;
					this.SendPropertyChanged("Enabled");
					this.OnEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MailingList_MailingReplacement", Storage="_MailingReplacements", ThisKey="ID", OtherKey="MailingID")]
		public EntitySet<MailingReplacement> MailingReplacements
		{
			get
			{
				return this._MailingReplacements;
			}
			set
			{
				this._MailingReplacements.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MailingReplacements(MailingReplacement entity)
		{
			this.SendPropertyChanging();
			entity.MailingList = this;
		}
		
		private void detach_MailingReplacements(MailingReplacement entity)
		{
			this.SendPropertyChanging();
			entity.MailingList = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LentaComments")]
	public partial class LentaComment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CommentID;
		
		private int _LentaID;
		
		private EntityRef<Comment> _Comment;
		
		private EntityRef<Lenta> _Lenta;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCommentIDChanging(int value);
    partial void OnCommentIDChanged();
    partial void OnLentaIDChanging(int value);
    partial void OnLentaIDChanged();
    #endregion
		
		public LentaComment()
		{
			this._Comment = default(EntityRef<Comment>);
			this._Lenta = default(EntityRef<Lenta>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentID", DbType="Int NOT NULL")]
		public int CommentID
		{
			get
			{
				return this._CommentID;
			}
			set
			{
				if ((this._CommentID != value))
				{
					if (this._Comment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommentIDChanging(value);
					this.SendPropertyChanging();
					this._CommentID = value;
					this.SendPropertyChanged("CommentID");
					this.OnCommentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LentaID", DbType="Int NOT NULL")]
		public int LentaID
		{
			get
			{
				return this._LentaID;
			}
			set
			{
				if ((this._LentaID != value))
				{
					if (this._Lenta.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLentaIDChanging(value);
					this.SendPropertyChanging();
					this._LentaID = value;
					this.SendPropertyChanged("LentaID");
					this.OnLentaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_LentaComment", Storage="_Comment", ThisKey="CommentID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Comment Comment
		{
			get
			{
				return this._Comment.Entity;
			}
			set
			{
				Comment previousValue = this._Comment.Entity;
				if (((previousValue != value) 
							|| (this._Comment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Comment.Entity = null;
						previousValue.LentaComments.Remove(this);
					}
					this._Comment.Entity = value;
					if ((value != null))
					{
						value.LentaComments.Add(this);
						this._CommentID = value.ID;
					}
					else
					{
						this._CommentID = default(int);
					}
					this.SendPropertyChanged("Comment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lenta_LentaComment", Storage="_Lenta", ThisKey="LentaID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Lenta Lenta
		{
			get
			{
				return this._Lenta.Entity;
			}
			set
			{
				Lenta previousValue = this._Lenta.Entity;
				if (((previousValue != value) 
							|| (this._Lenta.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lenta.Entity = null;
						previousValue.LentaComments.Remove(this);
					}
					this._Lenta.Entity = value;
					if ((value != null))
					{
						value.LentaComments.Add(this);
						this._LentaID = value.ID;
					}
					else
					{
						this._LentaID = default(int);
					}
					this.SendPropertyChanged("Lenta");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Comments")]
	public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Guid _UserID;
		
		private string _CommentText;
		
		private System.DateTime _Date;
		
		private System.Nullable<int> _ParentCommentID;
		
		private EntitySet<LentaComment> _LentaComments;
		
		private EntitySet<Comment> _Comments;
		
		private EntitySet<MapObjectComment> _MapObjectComments;
		
		private EntityRef<User> _User;
		
		private EntityRef<Comment> _Comment2;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnCommentTextChanging(string value);
    partial void OnCommentTextChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnParentCommentIDChanging(System.Nullable<int> value);
    partial void OnParentCommentIDChanged();
    #endregion
		
		public Comment()
		{
			this._LentaComments = new EntitySet<LentaComment>(new Action<LentaComment>(this.attach_LentaComments), new Action<LentaComment>(this.detach_LentaComments));
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._MapObjectComments = new EntitySet<MapObjectComment>(new Action<MapObjectComment>(this.attach_MapObjectComments), new Action<MapObjectComment>(this.detach_MapObjectComments));
			this._User = default(EntityRef<User>);
			this._Comment2 = default(EntityRef<Comment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Comment", Storage="_CommentText", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string CommentText
		{
			get
			{
				return this._CommentText;
			}
			set
			{
				if ((this._CommentText != value))
				{
					this.OnCommentTextChanging(value);
					this.SendPropertyChanging();
					this._CommentText = value;
					this.SendPropertyChanged("CommentText");
					this.OnCommentTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentCommentID", DbType="Int")]
		public System.Nullable<int> ParentCommentID
		{
			get
			{
				return this._ParentCommentID;
			}
			set
			{
				if ((this._ParentCommentID != value))
				{
					if (this._Comment2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentCommentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentCommentID = value;
					this.SendPropertyChanged("ParentCommentID");
					this.OnParentCommentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_LentaComment", Storage="_LentaComments", ThisKey="ID", OtherKey="CommentID")]
		public EntitySet<LentaComment> LentaComments
		{
			get
			{
				return this._LentaComments;
			}
			set
			{
				this._LentaComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_Comment", Storage="_Comments", ThisKey="ID", OtherKey="ParentCommentID")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_MapObjectComment", Storage="_MapObjectComments", ThisKey="ID", OtherKey="CommentID")]
		public EntitySet<MapObjectComment> MapObjectComments
		{
			get
			{
				return this._MapObjectComments;
			}
			set
			{
				this._MapObjectComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Comment", Storage="_User", ThisKey="UserID", OtherKey="UserId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._UserID = value.UserId;
					}
					else
					{
						this._UserID = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_Comment", Storage="_Comment2", ThisKey="ParentCommentID", OtherKey="ID", IsForeignKey=true)]
		public Comment Comment2
		{
			get
			{
				return this._Comment2.Entity;
			}
			set
			{
				Comment previousValue = this._Comment2.Entity;
				if (((previousValue != value) 
							|| (this._Comment2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Comment2.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._Comment2.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._ParentCommentID = value.ID;
					}
					else
					{
						this._ParentCommentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Comment2");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LentaComments(LentaComment entity)
		{
			this.SendPropertyChanging();
			entity.Comment = this;
		}
		
		private void detach_LentaComments(LentaComment entity)
		{
			this.SendPropertyChanging();
			entity.Comment = null;
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Comment2 = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Comment2 = null;
		}
		
		private void attach_MapObjectComments(MapObjectComment entity)
		{
			this.SendPropertyChanging();
			entity.Comment = this;
		}
		
		private void detach_MapObjectComments(MapObjectComment entity)
		{
			this.SendPropertyChanging();
			entity.Comment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CMSPageCellView")]
	public partial class CMSPageCellView : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CellID;
		
		private string _Controller;
		
		private string _Action;
		
		private int _OrderNum;
		
		private string _Path;
		
		private EntitySet<CMSPageTextData> _CMSPageTextDatas;
		
		private EntitySet<CMSPageSlider> _CMSPageSliders;
		
		private EntityRef<CMSPageCell> _CMSPageCell;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCellIDChanging(int value);
    partial void OnCellIDChanged();
    partial void OnControllerChanging(string value);
    partial void OnControllerChanged();
    partial void OnActionChanging(string value);
    partial void OnActionChanged();
    partial void OnOrderNumChanging(int value);
    partial void OnOrderNumChanged();
    partial void OnPathChanging(string value);
    partial void OnPathChanged();
    #endregion
		
		public CMSPageCellView()
		{
			this._CMSPageTextDatas = new EntitySet<CMSPageTextData>(new Action<CMSPageTextData>(this.attach_CMSPageTextDatas), new Action<CMSPageTextData>(this.detach_CMSPageTextDatas));
			this._CMSPageSliders = new EntitySet<CMSPageSlider>(new Action<CMSPageSlider>(this.attach_CMSPageSliders), new Action<CMSPageSlider>(this.detach_CMSPageSliders));
			this._CMSPageCell = default(EntityRef<CMSPageCell>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CellID", DbType="Int NOT NULL")]
		public int CellID
		{
			get
			{
				return this._CellID;
			}
			set
			{
				if ((this._CellID != value))
				{
					if (this._CMSPageCell.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCellIDChanging(value);
					this.SendPropertyChanging();
					this._CellID = value;
					this.SendPropertyChanged("CellID");
					this.OnCellIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Controller", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Controller
		{
			get
			{
				return this._Controller;
			}
			set
			{
				if ((this._Controller != value))
				{
					this.OnControllerChanging(value);
					this.SendPropertyChanging();
					this._Controller = value;
					this.SendPropertyChanged("Controller");
					this.OnControllerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Action", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Action
		{
			get
			{
				return this._Action;
			}
			set
			{
				if ((this._Action != value))
				{
					this.OnActionChanging(value);
					this.SendPropertyChanging();
					this._Action = value;
					this.SendPropertyChanged("Action");
					this.OnActionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderNum", DbType="Int NOT NULL")]
		public int OrderNum
		{
			get
			{
				return this._OrderNum;
			}
			set
			{
				if ((this._OrderNum != value))
				{
					this.OnOrderNumChanging(value);
					this.SendPropertyChanging();
					this._OrderNum = value;
					this.SendPropertyChanged("OrderNum");
					this.OnOrderNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Path", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this.OnPathChanging(value);
					this.SendPropertyChanging();
					this._Path = value;
					this.SendPropertyChanged("Path");
					this.OnPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CMSPageCellView_CMSPageTextData", Storage="_CMSPageTextDatas", ThisKey="ID", OtherKey="ViewID")]
		public EntitySet<CMSPageTextData> CMSPageTextDatas
		{
			get
			{
				return this._CMSPageTextDatas;
			}
			set
			{
				this._CMSPageTextDatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CMSPageCellView_CMSPageSlider", Storage="_CMSPageSliders", ThisKey="ID", OtherKey="ViewID")]
		public EntitySet<CMSPageSlider> CMSPageSliders
		{
			get
			{
				return this._CMSPageSliders;
			}
			set
			{
				this._CMSPageSliders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CMSPageCell_CMSPageCellView", Storage="_CMSPageCell", ThisKey="CellID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CMSPageCell CMSPageCell
		{
			get
			{
				return this._CMSPageCell.Entity;
			}
			set
			{
				CMSPageCell previousValue = this._CMSPageCell.Entity;
				if (((previousValue != value) 
							|| (this._CMSPageCell.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CMSPageCell.Entity = null;
						previousValue.CMSPageCellViews.Remove(this);
					}
					this._CMSPageCell.Entity = value;
					if ((value != null))
					{
						value.CMSPageCellViews.Add(this);
						this._CellID = value.ID;
					}
					else
					{
						this._CellID = default(int);
					}
					this.SendPropertyChanged("CMSPageCell");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CMSPageTextDatas(CMSPageTextData entity)
		{
			this.SendPropertyChanging();
			entity.CMSPageCellView = this;
		}
		
		private void detach_CMSPageTextDatas(CMSPageTextData entity)
		{
			this.SendPropertyChanging();
			entity.CMSPageCellView = null;
		}
		
		private void attach_CMSPageSliders(CMSPageSlider entity)
		{
			this.SendPropertyChanging();
			entity.CMSPageCellView = this;
		}
		
		private void detach_CMSPageSliders(CMSPageSlider entity)
		{
			this.SendPropertyChanging();
			entity.CMSPageCellView = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Lenta")]
	public partial class Lenta : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PageID;
		
		private int _CellID;
		
		private string _TypeClass;
		
		private string _HeaderText;
		
		private string _Link;
		
		private System.Data.Linq.Binary _Image;
		
		private System.Data.Linq.Binary _Photo;
		
		private string _Author;
		
		private string _Text;
		
		private string _CSS1;
		
		private string _CSS2;
		
		private string _CSS3;
		
		private string _CSS4;
		
		private string _CSS5;
		
		private bool _ShowInfo;
		
		private bool _ShowTime;
		
		private System.DateTime _CreateDate;
		
		private bool _Visible;
		
		private string _FullText;
		
		private System.Nullable<int> _ViewAmount;
		
		private string _CategoryName;
		
		private EntitySet<LentaComment> _LentaComments;
		
		private EntitySet<UserFavoriteLenta> _UserFavoriteLentas;
		
		private EntityRef<CMSPage> _CMSPage;
		
		private EntityRef<CMSPageCell> _CMSPageCell;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPageIDChanging(int value);
    partial void OnPageIDChanged();
    partial void OnCellIDChanging(int value);
    partial void OnCellIDChanged();
    partial void OnTypeClassChanging(string value);
    partial void OnTypeClassChanged();
    partial void OnHeaderTextChanging(string value);
    partial void OnHeaderTextChanged();
    partial void OnLinkChanging(string value);
    partial void OnLinkChanged();
    partial void OnImageChanging(System.Data.Linq.Binary value);
    partial void OnImageChanged();
    partial void OnPhotoChanging(System.Data.Linq.Binary value);
    partial void OnPhotoChanged();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnCSS1Changing(string value);
    partial void OnCSS1Changed();
    partial void OnCSS2Changing(string value);
    partial void OnCSS2Changed();
    partial void OnCSS3Changing(string value);
    partial void OnCSS3Changed();
    partial void OnCSS4Changing(string value);
    partial void OnCSS4Changed();
    partial void OnCSS5Changing(string value);
    partial void OnCSS5Changed();
    partial void OnShowInfoChanging(bool value);
    partial void OnShowInfoChanged();
    partial void OnShowTimeChanging(bool value);
    partial void OnShowTimeChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnVisibleChanging(bool value);
    partial void OnVisibleChanged();
    partial void OnFullTextChanging(string value);
    partial void OnFullTextChanged();
    partial void OnViewAmountChanging(System.Nullable<int> value);
    partial void OnViewAmountChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    #endregion
		
		public Lenta()
		{
			this._LentaComments = new EntitySet<LentaComment>(new Action<LentaComment>(this.attach_LentaComments), new Action<LentaComment>(this.detach_LentaComments));
			this._UserFavoriteLentas = new EntitySet<UserFavoriteLenta>(new Action<UserFavoriteLenta>(this.attach_UserFavoriteLentas), new Action<UserFavoriteLenta>(this.detach_UserFavoriteLentas));
			this._CMSPage = default(EntityRef<CMSPage>);
			this._CMSPageCell = default(EntityRef<CMSPageCell>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageID", DbType="Int NOT NULL")]
		public int PageID
		{
			get
			{
				return this._PageID;
			}
			set
			{
				if ((this._PageID != value))
				{
					if (this._CMSPage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPageIDChanging(value);
					this.SendPropertyChanging();
					this._PageID = value;
					this.SendPropertyChanged("PageID");
					this.OnPageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CellID", DbType="Int NOT NULL")]
		public int CellID
		{
			get
			{
				return this._CellID;
			}
			set
			{
				if ((this._CellID != value))
				{
					if (this._CMSPageCell.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCellIDChanging(value);
					this.SendPropertyChanging();
					this._CellID = value;
					this.SendPropertyChanged("CellID");
					this.OnCellIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeClass", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TypeClass
		{
			get
			{
				return this._TypeClass;
			}
			set
			{
				if ((this._TypeClass != value))
				{
					this.OnTypeClassChanging(value);
					this.SendPropertyChanging();
					this._TypeClass = value;
					this.SendPropertyChanged("TypeClass");
					this.OnTypeClassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HeaderText", DbType="NVarChar(200)")]
		public string HeaderText
		{
			get
			{
				return this._HeaderText;
			}
			set
			{
				if ((this._HeaderText != value))
				{
					this.OnHeaderTextChanging(value);
					this.SendPropertyChanging();
					this._HeaderText = value;
					this.SendPropertyChanged("HeaderText");
					this.OnHeaderTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Link", DbType="NVarChar(500)")]
		public string Link
		{
			get
			{
				return this._Link;
			}
			set
			{
				if ((this._Link != value))
				{
					this.OnLinkChanging(value);
					this.SendPropertyChanging();
					this._Link = value;
					this.SendPropertyChanged("Link");
					this.OnLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Photo", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this.OnPhotoChanging(value);
					this.SendPropertyChanging();
					this._Photo = value;
					this.SendPropertyChanged("Photo");
					this.OnPhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Author", DbType="NVarChar(50)")]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(MAX)")]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CSS1", DbType="NVarChar(50)")]
		public string CSS1
		{
			get
			{
				return this._CSS1;
			}
			set
			{
				if ((this._CSS1 != value))
				{
					this.OnCSS1Changing(value);
					this.SendPropertyChanging();
					this._CSS1 = value;
					this.SendPropertyChanged("CSS1");
					this.OnCSS1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CSS2", DbType="NVarChar(50)")]
		public string CSS2
		{
			get
			{
				return this._CSS2;
			}
			set
			{
				if ((this._CSS2 != value))
				{
					this.OnCSS2Changing(value);
					this.SendPropertyChanging();
					this._CSS2 = value;
					this.SendPropertyChanged("CSS2");
					this.OnCSS2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CSS3", DbType="NVarChar(50)")]
		public string CSS3
		{
			get
			{
				return this._CSS3;
			}
			set
			{
				if ((this._CSS3 != value))
				{
					this.OnCSS3Changing(value);
					this.SendPropertyChanging();
					this._CSS3 = value;
					this.SendPropertyChanged("CSS3");
					this.OnCSS3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CSS4", DbType="NVarChar(50)")]
		public string CSS4
		{
			get
			{
				return this._CSS4;
			}
			set
			{
				if ((this._CSS4 != value))
				{
					this.OnCSS4Changing(value);
					this.SendPropertyChanging();
					this._CSS4 = value;
					this.SendPropertyChanged("CSS4");
					this.OnCSS4Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CSS5", DbType="NVarChar(50)")]
		public string CSS5
		{
			get
			{
				return this._CSS5;
			}
			set
			{
				if ((this._CSS5 != value))
				{
					this.OnCSS5Changing(value);
					this.SendPropertyChanging();
					this._CSS5 = value;
					this.SendPropertyChanged("CSS5");
					this.OnCSS5Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShowInfo", DbType="Bit NOT NULL")]
		public bool ShowInfo
		{
			get
			{
				return this._ShowInfo;
			}
			set
			{
				if ((this._ShowInfo != value))
				{
					this.OnShowInfoChanging(value);
					this.SendPropertyChanging();
					this._ShowInfo = value;
					this.SendPropertyChanged("ShowInfo");
					this.OnShowInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShowTime", DbType="Bit NOT NULL")]
		public bool ShowTime
		{
			get
			{
				return this._ShowTime;
			}
			set
			{
				if ((this._ShowTime != value))
				{
					this.OnShowTimeChanging(value);
					this.SendPropertyChanging();
					this._ShowTime = value;
					this.SendPropertyChanged("ShowTime");
					this.OnShowTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Visible", DbType="Bit NOT NULL")]
		public bool Visible
		{
			get
			{
				return this._Visible;
			}
			set
			{
				if ((this._Visible != value))
				{
					this.OnVisibleChanging(value);
					this.SendPropertyChanging();
					this._Visible = value;
					this.SendPropertyChanged("Visible");
					this.OnVisibleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullText", DbType="NVarChar(MAX)")]
		public string FullText
		{
			get
			{
				return this._FullText;
			}
			set
			{
				if ((this._FullText != value))
				{
					this.OnFullTextChanging(value);
					this.SendPropertyChanging();
					this._FullText = value;
					this.SendPropertyChanged("FullText");
					this.OnFullTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ViewAmount", DbType="Int")]
		public System.Nullable<int> ViewAmount
		{
			get
			{
				return this._ViewAmount;
			}
			set
			{
				if ((this._ViewAmount != value))
				{
					this.OnViewAmountChanging(value);
					this.SendPropertyChanging();
					this._ViewAmount = value;
					this.SendPropertyChanged("ViewAmount");
					this.OnViewAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="NVarChar(200)")]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lenta_LentaComment", Storage="_LentaComments", ThisKey="ID", OtherKey="LentaID")]
		public EntitySet<LentaComment> LentaComments
		{
			get
			{
				return this._LentaComments;
			}
			set
			{
				this._LentaComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lenta_UserFavoriteLenta", Storage="_UserFavoriteLentas", ThisKey="ID", OtherKey="LentaID")]
		public EntitySet<UserFavoriteLenta> UserFavoriteLentas
		{
			get
			{
				return this._UserFavoriteLentas;
			}
			set
			{
				this._UserFavoriteLentas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CMSPage_Lenta", Storage="_CMSPage", ThisKey="PageID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CMSPage CMSPage
		{
			get
			{
				return this._CMSPage.Entity;
			}
			set
			{
				CMSPage previousValue = this._CMSPage.Entity;
				if (((previousValue != value) 
							|| (this._CMSPage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CMSPage.Entity = null;
						previousValue.Lentas.Remove(this);
					}
					this._CMSPage.Entity = value;
					if ((value != null))
					{
						value.Lentas.Add(this);
						this._PageID = value.ID;
					}
					else
					{
						this._PageID = default(int);
					}
					this.SendPropertyChanged("CMSPage");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CMSPageCell_Lenta", Storage="_CMSPageCell", ThisKey="CellID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CMSPageCell CMSPageCell
		{
			get
			{
				return this._CMSPageCell.Entity;
			}
			set
			{
				CMSPageCell previousValue = this._CMSPageCell.Entity;
				if (((previousValue != value) 
							|| (this._CMSPageCell.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CMSPageCell.Entity = null;
						previousValue.Lentas.Remove(this);
					}
					this._CMSPageCell.Entity = value;
					if ((value != null))
					{
						value.Lentas.Add(this);
						this._CellID = value.ID;
					}
					else
					{
						this._CellID = default(int);
					}
					this.SendPropertyChanged("CMSPageCell");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LentaComments(LentaComment entity)
		{
			this.SendPropertyChanging();
			entity.Lenta = this;
		}
		
		private void detach_LentaComments(LentaComment entity)
		{
			this.SendPropertyChanging();
			entity.Lenta = null;
		}
		
		private void attach_UserFavoriteLentas(UserFavoriteLenta entity)
		{
			this.SendPropertyChanging();
			entity.Lenta = this;
		}
		
		private void detach_UserFavoriteLentas(UserFavoriteLenta entity)
		{
			this.SendPropertyChanging();
			entity.Lenta = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CMSPageCells")]
	public partial class CMSPageCell : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _ColumnName;
		
		private int _TypeID;
		
		private string _Description;
		
		private bool _Hidden;
		
		private string _CSS;
		
		private EntitySet<CMSPageCellView> _CMSPageCellViews;
		
		private EntitySet<Lenta> _Lentas;
		
		private EntityRef<PageType> _PageType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnColumnNameChanging(string value);
    partial void OnColumnNameChanged();
    partial void OnTypeIDChanging(int value);
    partial void OnTypeIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnHiddenChanging(bool value);
    partial void OnHiddenChanged();
    partial void OnCSSChanging(string value);
    partial void OnCSSChanged();
    #endregion
		
		public CMSPageCell()
		{
			this._CMSPageCellViews = new EntitySet<CMSPageCellView>(new Action<CMSPageCellView>(this.attach_CMSPageCellViews), new Action<CMSPageCellView>(this.detach_CMSPageCellViews));
			this._Lentas = new EntitySet<Lenta>(new Action<Lenta>(this.attach_Lentas), new Action<Lenta>(this.detach_Lentas));
			this._PageType = default(EntityRef<PageType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColumnName", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string ColumnName
		{
			get
			{
				return this._ColumnName;
			}
			set
			{
				if ((this._ColumnName != value))
				{
					this.OnColumnNameChanging(value);
					this.SendPropertyChanging();
					this._ColumnName = value;
					this.SendPropertyChanged("ColumnName");
					this.OnColumnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="Int NOT NULL")]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					if (this._PageType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hidden", DbType="Bit NOT NULL")]
		public bool Hidden
		{
			get
			{
				return this._Hidden;
			}
			set
			{
				if ((this._Hidden != value))
				{
					this.OnHiddenChanging(value);
					this.SendPropertyChanging();
					this._Hidden = value;
					this.SendPropertyChanged("Hidden");
					this.OnHiddenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CSS", DbType="NVarChar(50)")]
		public string CSS
		{
			get
			{
				return this._CSS;
			}
			set
			{
				if ((this._CSS != value))
				{
					this.OnCSSChanging(value);
					this.SendPropertyChanging();
					this._CSS = value;
					this.SendPropertyChanged("CSS");
					this.OnCSSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CMSPageCell_CMSPageCellView", Storage="_CMSPageCellViews", ThisKey="ID", OtherKey="CellID")]
		public EntitySet<CMSPageCellView> CMSPageCellViews
		{
			get
			{
				return this._CMSPageCellViews;
			}
			set
			{
				this._CMSPageCellViews.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CMSPageCell_Lenta", Storage="_Lentas", ThisKey="ID", OtherKey="CellID")]
		public EntitySet<Lenta> Lentas
		{
			get
			{
				return this._Lentas;
			}
			set
			{
				this._Lentas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PageType_CMSPageCell", Storage="_PageType", ThisKey="TypeID", OtherKey="ID", IsForeignKey=true)]
		public PageType PageType
		{
			get
			{
				return this._PageType.Entity;
			}
			set
			{
				PageType previousValue = this._PageType.Entity;
				if (((previousValue != value) 
							|| (this._PageType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PageType.Entity = null;
						previousValue.CMSPageCells.Remove(this);
					}
					this._PageType.Entity = value;
					if ((value != null))
					{
						value.CMSPageCells.Add(this);
						this._TypeID = value.ID;
					}
					else
					{
						this._TypeID = default(int);
					}
					this.SendPropertyChanged("PageType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CMSPageCellViews(CMSPageCellView entity)
		{
			this.SendPropertyChanging();
			entity.CMSPageCell = this;
		}
		
		private void detach_CMSPageCellViews(CMSPageCellView entity)
		{
			this.SendPropertyChanging();
			entity.CMSPageCell = null;
		}
		
		private void attach_Lentas(Lenta entity)
		{
			this.SendPropertyChanging();
			entity.CMSPageCell = this;
		}
		
		private void detach_Lentas(Lenta entity)
		{
			this.SendPropertyChanging();
			entity.CMSPageCell = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CMSPageTextData")]
	public partial class CMSPageTextData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CMSPageID;
		
		private int _LangID;
		
		private string _Text;
		
		private int _ViewID;
		
		private bool _Visible;
		
		private int _OrderNum;
		
		private EntityRef<CMSPageCellView> _CMSPageCellView;
		
		private EntityRef<CMSPage> _CMSPage;
		
		private EntityRef<Language> _Language;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCMSPageIDChanging(int value);
    partial void OnCMSPageIDChanged();
    partial void OnLangIDChanging(int value);
    partial void OnLangIDChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnViewIDChanging(int value);
    partial void OnViewIDChanged();
    partial void OnVisibleChanging(bool value);
    partial void OnVisibleChanged();
    partial void OnOrderNumChanging(int value);
    partial void OnOrderNumChanged();
    #endregion
		
		public CMSPageTextData()
		{
			this._CMSPageCellView = default(EntityRef<CMSPageCellView>);
			this._CMSPage = default(EntityRef<CMSPage>);
			this._Language = default(EntityRef<Language>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CMSPageID", DbType="Int NOT NULL")]
		public int CMSPageID
		{
			get
			{
				return this._CMSPageID;
			}
			set
			{
				if ((this._CMSPageID != value))
				{
					if (this._CMSPage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCMSPageIDChanging(value);
					this.SendPropertyChanging();
					this._CMSPageID = value;
					this.SendPropertyChanged("CMSPageID");
					this.OnCMSPageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LangID", DbType="Int NOT NULL")]
		public int LangID
		{
			get
			{
				return this._LangID;
			}
			set
			{
				if ((this._LangID != value))
				{
					if (this._Language.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLangIDChanging(value);
					this.SendPropertyChanging();
					this._LangID = value;
					this.SendPropertyChanged("LangID");
					this.OnLangIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ViewID", DbType="Int NOT NULL")]
		public int ViewID
		{
			get
			{
				return this._ViewID;
			}
			set
			{
				if ((this._ViewID != value))
				{
					if (this._CMSPageCellView.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnViewIDChanging(value);
					this.SendPropertyChanging();
					this._ViewID = value;
					this.SendPropertyChanged("ViewID");
					this.OnViewIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Visible", DbType="Bit NOT NULL")]
		public bool Visible
		{
			get
			{
				return this._Visible;
			}
			set
			{
				if ((this._Visible != value))
				{
					this.OnVisibleChanging(value);
					this.SendPropertyChanging();
					this._Visible = value;
					this.SendPropertyChanged("Visible");
					this.OnVisibleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderNum", DbType="Int NOT NULL")]
		public int OrderNum
		{
			get
			{
				return this._OrderNum;
			}
			set
			{
				if ((this._OrderNum != value))
				{
					this.OnOrderNumChanging(value);
					this.SendPropertyChanging();
					this._OrderNum = value;
					this.SendPropertyChanged("OrderNum");
					this.OnOrderNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CMSPageCellView_CMSPageTextData", Storage="_CMSPageCellView", ThisKey="ViewID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CMSPageCellView CMSPageCellView
		{
			get
			{
				return this._CMSPageCellView.Entity;
			}
			set
			{
				CMSPageCellView previousValue = this._CMSPageCellView.Entity;
				if (((previousValue != value) 
							|| (this._CMSPageCellView.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CMSPageCellView.Entity = null;
						previousValue.CMSPageTextDatas.Remove(this);
					}
					this._CMSPageCellView.Entity = value;
					if ((value != null))
					{
						value.CMSPageTextDatas.Add(this);
						this._ViewID = value.ID;
					}
					else
					{
						this._ViewID = default(int);
					}
					this.SendPropertyChanged("CMSPageCellView");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CMSPage_CMSPageTextData", Storage="_CMSPage", ThisKey="CMSPageID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CMSPage CMSPage
		{
			get
			{
				return this._CMSPage.Entity;
			}
			set
			{
				CMSPage previousValue = this._CMSPage.Entity;
				if (((previousValue != value) 
							|| (this._CMSPage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CMSPage.Entity = null;
						previousValue.CMSPageTextDatas.Remove(this);
					}
					this._CMSPage.Entity = value;
					if ((value != null))
					{
						value.CMSPageTextDatas.Add(this);
						this._CMSPageID = value.ID;
					}
					else
					{
						this._CMSPageID = default(int);
					}
					this.SendPropertyChanged("CMSPage");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Language_CMSPageTextData", Storage="_Language", ThisKey="LangID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Language Language
		{
			get
			{
				return this._Language.Entity;
			}
			set
			{
				Language previousValue = this._Language.Entity;
				if (((previousValue != value) 
							|| (this._Language.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Language.Entity = null;
						previousValue.CMSPageTextDatas.Remove(this);
					}
					this._Language.Entity = value;
					if ((value != null))
					{
						value.CMSPageTextDatas.Add(this);
						this._LangID = value.ID;
					}
					else
					{
						this._LangID = default(int);
					}
					this.SendPropertyChanged("Language");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MapObjectTypes")]
	public partial class MapObjectType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _TypeName;
		
		private string _Icon;
		
		private int _OrderNum;
		
		private EntitySet<MapObject> _MapObjects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    partial void OnIconChanging(string value);
    partial void OnIconChanged();
    partial void OnOrderNumChanging(int value);
    partial void OnOrderNumChanged();
    #endregion
		
		public MapObjectType()
		{
			this._MapObjects = new EntitySet<MapObject>(new Action<MapObject>(this.attach_MapObjects), new Action<MapObject>(this.detach_MapObjects));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeName", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Icon", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Icon
		{
			get
			{
				return this._Icon;
			}
			set
			{
				if ((this._Icon != value))
				{
					this.OnIconChanging(value);
					this.SendPropertyChanging();
					this._Icon = value;
					this.SendPropertyChanged("Icon");
					this.OnIconChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderNum", DbType="Int NOT NULL")]
		public int OrderNum
		{
			get
			{
				return this._OrderNum;
			}
			set
			{
				if ((this._OrderNum != value))
				{
					this.OnOrderNumChanging(value);
					this.SendPropertyChanging();
					this._OrderNum = value;
					this.SendPropertyChanged("OrderNum");
					this.OnOrderNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MapObjectType_MapObject", Storage="_MapObjects", ThisKey="ID", OtherKey="TypeID")]
		public EntitySet<MapObject> MapObjects
		{
			get
			{
				return this._MapObjects;
			}
			set
			{
				this._MapObjects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MapObjects(MapObject entity)
		{
			this.SendPropertyChanging();
			entity.MapObjectType = this;
		}
		
		private void detach_MapObjects(MapObject entity)
		{
			this.SendPropertyChanging();
			entity.MapObjectType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MapObjects")]
	public partial class MapObject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _TypeID;
		
		private System.Guid _CreatorID;
		
		private System.DateTime _CreateDate;
		
		private int _ObjectType;
		
		private string _Address;
		
		private string _Description;
		
		private EntityRef<MapObjectPhoto> _MapObjectPhoto;
		
		private EntitySet<MapCoord> _MapCoords;
		
		private EntitySet<MapObjectFavorite> _MapObjectFavorites;
		
		private EntitySet<MapObjectComment> _MapObjectComments;
		
		private EntityRef<User> _User;
		
		private EntityRef<MapObjectType> _MapObjectType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTypeIDChanging(int value);
    partial void OnTypeIDChanged();
    partial void OnCreatorIDChanging(System.Guid value);
    partial void OnCreatorIDChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnObjectTypeChanging(int value);
    partial void OnObjectTypeChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public MapObject()
		{
			this._MapObjectPhoto = default(EntityRef<MapObjectPhoto>);
			this._MapCoords = new EntitySet<MapCoord>(new Action<MapCoord>(this.attach_MapCoords), new Action<MapCoord>(this.detach_MapCoords));
			this._MapObjectFavorites = new EntitySet<MapObjectFavorite>(new Action<MapObjectFavorite>(this.attach_MapObjectFavorites), new Action<MapObjectFavorite>(this.detach_MapObjectFavorites));
			this._MapObjectComments = new EntitySet<MapObjectComment>(new Action<MapObjectComment>(this.attach_MapObjectComments), new Action<MapObjectComment>(this.detach_MapObjectComments));
			this._User = default(EntityRef<User>);
			this._MapObjectType = default(EntityRef<MapObjectType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(400) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="Int NOT NULL")]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					if (this._MapObjectType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatorID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CreatorID
		{
			get
			{
				return this._CreatorID;
			}
			set
			{
				if ((this._CreatorID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorIDChanging(value);
					this.SendPropertyChanging();
					this._CreatorID = value;
					this.SendPropertyChanged("CreatorID");
					this.OnCreatorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectType", DbType="Int NOT NULL")]
		public int ObjectType
		{
			get
			{
				return this._ObjectType;
			}
			set
			{
				if ((this._ObjectType != value))
				{
					this.OnObjectTypeChanging(value);
					this.SendPropertyChanging();
					this._ObjectType = value;
					this.SendPropertyChanged("ObjectType");
					this.OnObjectTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(1000)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MapObject_MapObjectPhoto", Storage="_MapObjectPhoto", ThisKey="ID", OtherKey="ObjectID", IsUnique=true, IsForeignKey=false)]
		public MapObjectPhoto MapObjectPhoto
		{
			get
			{
				return this._MapObjectPhoto.Entity;
			}
			set
			{
				MapObjectPhoto previousValue = this._MapObjectPhoto.Entity;
				if (((previousValue != value) 
							|| (this._MapObjectPhoto.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MapObjectPhoto.Entity = null;
						previousValue.MapObject = null;
					}
					this._MapObjectPhoto.Entity = value;
					if ((value != null))
					{
						value.MapObject = this;
					}
					this.SendPropertyChanged("MapObjectPhoto");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MapObject_MapCoord", Storage="_MapCoords", ThisKey="ID", OtherKey="ObjectID")]
		public EntitySet<MapCoord> MapCoords
		{
			get
			{
				return this._MapCoords;
			}
			set
			{
				this._MapCoords.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MapObject_MapObjectFavorite", Storage="_MapObjectFavorites", ThisKey="ID", OtherKey="ObjectID")]
		public EntitySet<MapObjectFavorite> MapObjectFavorites
		{
			get
			{
				return this._MapObjectFavorites;
			}
			set
			{
				this._MapObjectFavorites.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MapObject_MapObjectComment", Storage="_MapObjectComments", ThisKey="ID", OtherKey="ObjectID")]
		public EntitySet<MapObjectComment> MapObjectComments
		{
			get
			{
				return this._MapObjectComments;
			}
			set
			{
				this._MapObjectComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_MapObject", Storage="_User", ThisKey="CreatorID", OtherKey="UserId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.MapObjects.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.MapObjects.Add(this);
						this._CreatorID = value.UserId;
					}
					else
					{
						this._CreatorID = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MapObjectType_MapObject", Storage="_MapObjectType", ThisKey="TypeID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MapObjectType MapObjectType
		{
			get
			{
				return this._MapObjectType.Entity;
			}
			set
			{
				MapObjectType previousValue = this._MapObjectType.Entity;
				if (((previousValue != value) 
							|| (this._MapObjectType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MapObjectType.Entity = null;
						previousValue.MapObjects.Remove(this);
					}
					this._MapObjectType.Entity = value;
					if ((value != null))
					{
						value.MapObjects.Add(this);
						this._TypeID = value.ID;
					}
					else
					{
						this._TypeID = default(int);
					}
					this.SendPropertyChanged("MapObjectType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MapCoords(MapCoord entity)
		{
			this.SendPropertyChanging();
			entity.MapObject = this;
		}
		
		private void detach_MapCoords(MapCoord entity)
		{
			this.SendPropertyChanging();
			entity.MapObject = null;
		}
		
		private void attach_MapObjectFavorites(MapObjectFavorite entity)
		{
			this.SendPropertyChanging();
			entity.MapObject = this;
		}
		
		private void detach_MapObjectFavorites(MapObjectFavorite entity)
		{
			this.SendPropertyChanging();
			entity.MapObject = null;
		}
		
		private void attach_MapObjectComments(MapObjectComment entity)
		{
			this.SendPropertyChanging();
			entity.MapObject = this;
		}
		
		private void detach_MapObjectComments(MapObjectComment entity)
		{
			this.SendPropertyChanging();
			entity.MapObject = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MapObjectPhotos")]
	public partial class MapObjectPhoto : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ObjectID;
		
		private System.Data.Linq.Binary _RawData;
		
		private EntityRef<MapObject> _MapObject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnObjectIDChanging(int value);
    partial void OnObjectIDChanged();
    partial void OnRawDataChanging(System.Data.Linq.Binary value);
    partial void OnRawDataChanged();
    #endregion
		
		public MapObjectPhoto()
		{
			this._MapObject = default(EntityRef<MapObject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ObjectID
		{
			get
			{
				return this._ObjectID;
			}
			set
			{
				if ((this._ObjectID != value))
				{
					if (this._MapObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObjectIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectID = value;
					this.SendPropertyChanged("ObjectID");
					this.OnObjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RawData", DbType="VarBinary(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary RawData
		{
			get
			{
				return this._RawData;
			}
			set
			{
				if ((this._RawData != value))
				{
					this.OnRawDataChanging(value);
					this.SendPropertyChanging();
					this._RawData = value;
					this.SendPropertyChanged("RawData");
					this.OnRawDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MapObject_MapObjectPhoto", Storage="_MapObject", ThisKey="ObjectID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MapObject MapObject
		{
			get
			{
				return this._MapObject.Entity;
			}
			set
			{
				MapObject previousValue = this._MapObject.Entity;
				if (((previousValue != value) 
							|| (this._MapObject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MapObject.Entity = null;
						previousValue.MapObjectPhoto = null;
					}
					this._MapObject.Entity = value;
					if ((value != null))
					{
						value.MapObjectPhoto = this;
						this._ObjectID = value.ID;
					}
					else
					{
						this._ObjectID = default(int);
					}
					this.SendPropertyChanged("MapObject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MapCoords")]
	public partial class MapCoord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private decimal _XPos;
		
		private decimal _YPos;
		
		private int _ObjectID;
		
		private int _OrderNum;
		
		private bool _IsMarker;
		
		private EntityRef<MapObject> _MapObject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnXPosChanging(decimal value);
    partial void OnXPosChanged();
    partial void OnYPosChanging(decimal value);
    partial void OnYPosChanged();
    partial void OnObjectIDChanging(int value);
    partial void OnObjectIDChanged();
    partial void OnOrderNumChanging(int value);
    partial void OnOrderNumChanged();
    partial void OnIsMarkerChanging(bool value);
    partial void OnIsMarkerChanged();
    #endregion
		
		public MapCoord()
		{
			this._MapObject = default(EntityRef<MapObject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_XPos", DbType="Decimal(18,12) NOT NULL")]
		public decimal XPos
		{
			get
			{
				return this._XPos;
			}
			set
			{
				if ((this._XPos != value))
				{
					this.OnXPosChanging(value);
					this.SendPropertyChanging();
					this._XPos = value;
					this.SendPropertyChanged("XPos");
					this.OnXPosChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YPos", DbType="Decimal(18,12) NOT NULL")]
		public decimal YPos
		{
			get
			{
				return this._YPos;
			}
			set
			{
				if ((this._YPos != value))
				{
					this.OnYPosChanging(value);
					this.SendPropertyChanging();
					this._YPos = value;
					this.SendPropertyChanged("YPos");
					this.OnYPosChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectID", DbType="Int NOT NULL")]
		public int ObjectID
		{
			get
			{
				return this._ObjectID;
			}
			set
			{
				if ((this._ObjectID != value))
				{
					if (this._MapObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObjectIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectID = value;
					this.SendPropertyChanged("ObjectID");
					this.OnObjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderNum", DbType="Int NOT NULL")]
		public int OrderNum
		{
			get
			{
				return this._OrderNum;
			}
			set
			{
				if ((this._OrderNum != value))
				{
					this.OnOrderNumChanging(value);
					this.SendPropertyChanging();
					this._OrderNum = value;
					this.SendPropertyChanged("OrderNum");
					this.OnOrderNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsMarker", DbType="Bit NOT NULL")]
		public bool IsMarker
		{
			get
			{
				return this._IsMarker;
			}
			set
			{
				if ((this._IsMarker != value))
				{
					this.OnIsMarkerChanging(value);
					this.SendPropertyChanging();
					this._IsMarker = value;
					this.SendPropertyChanged("IsMarker");
					this.OnIsMarkerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MapObject_MapCoord", Storage="_MapObject", ThisKey="ObjectID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MapObject MapObject
		{
			get
			{
				return this._MapObject.Entity;
			}
			set
			{
				MapObject previousValue = this._MapObject.Entity;
				if (((previousValue != value) 
							|| (this._MapObject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MapObject.Entity = null;
						previousValue.MapCoords.Remove(this);
					}
					this._MapObject.Entity = value;
					if ((value != null))
					{
						value.MapCoords.Add(this);
						this._ObjectID = value.ID;
					}
					else
					{
						this._ObjectID = default(int);
					}
					this.SendPropertyChanged("MapObject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MapObjectFavorites")]
	public partial class MapObjectFavorite : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Guid _UserID;
		
		private int _ObjectID;
		
		private EntityRef<User> _User;
		
		private EntityRef<MapObject> _MapObject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnObjectIDChanging(int value);
    partial void OnObjectIDChanged();
    #endregion
		
		public MapObjectFavorite()
		{
			this._User = default(EntityRef<User>);
			this._MapObject = default(EntityRef<MapObject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectID", DbType="Int NOT NULL")]
		public int ObjectID
		{
			get
			{
				return this._ObjectID;
			}
			set
			{
				if ((this._ObjectID != value))
				{
					if (this._MapObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObjectIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectID = value;
					this.SendPropertyChanged("ObjectID");
					this.OnObjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_MapObjectFavorite", Storage="_User", ThisKey="UserID", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.MapObjectFavorites.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.MapObjectFavorites.Add(this);
						this._UserID = value.UserId;
					}
					else
					{
						this._UserID = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MapObject_MapObjectFavorite", Storage="_MapObject", ThisKey="ObjectID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MapObject MapObject
		{
			get
			{
				return this._MapObject.Entity;
			}
			set
			{
				MapObject previousValue = this._MapObject.Entity;
				if (((previousValue != value) 
							|| (this._MapObject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MapObject.Entity = null;
						previousValue.MapObjectFavorites.Remove(this);
					}
					this._MapObject.Entity = value;
					if ((value != null))
					{
						value.MapObjectFavorites.Add(this);
						this._ObjectID = value.ID;
					}
					else
					{
						this._ObjectID = default(int);
					}
					this.SendPropertyChanged("MapObject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MapObjectComments")]
	public partial class MapObjectComment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CommentID;
		
		private int _ObjectID;
		
		private EntityRef<Comment> _Comment;
		
		private EntityRef<MapObject> _MapObject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCommentIDChanging(int value);
    partial void OnCommentIDChanged();
    partial void OnObjectIDChanging(int value);
    partial void OnObjectIDChanged();
    #endregion
		
		public MapObjectComment()
		{
			this._Comment = default(EntityRef<Comment>);
			this._MapObject = default(EntityRef<MapObject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentID", DbType="Int NOT NULL")]
		public int CommentID
		{
			get
			{
				return this._CommentID;
			}
			set
			{
				if ((this._CommentID != value))
				{
					if (this._Comment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommentIDChanging(value);
					this.SendPropertyChanging();
					this._CommentID = value;
					this.SendPropertyChanged("CommentID");
					this.OnCommentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectID", DbType="Int NOT NULL")]
		public int ObjectID
		{
			get
			{
				return this._ObjectID;
			}
			set
			{
				if ((this._ObjectID != value))
				{
					if (this._MapObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObjectIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectID = value;
					this.SendPropertyChanged("ObjectID");
					this.OnObjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_MapObjectComment", Storage="_Comment", ThisKey="CommentID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Comment Comment
		{
			get
			{
				return this._Comment.Entity;
			}
			set
			{
				Comment previousValue = this._Comment.Entity;
				if (((previousValue != value) 
							|| (this._Comment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Comment.Entity = null;
						previousValue.MapObjectComments.Remove(this);
					}
					this._Comment.Entity = value;
					if ((value != null))
					{
						value.MapObjectComments.Add(this);
						this._CommentID = value.ID;
					}
					else
					{
						this._CommentID = default(int);
					}
					this.SendPropertyChanged("Comment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MapObject_MapObjectComment", Storage="_MapObject", ThisKey="ObjectID", OtherKey="ID", IsForeignKey=true)]
		public MapObject MapObject
		{
			get
			{
				return this._MapObject.Entity;
			}
			set
			{
				MapObject previousValue = this._MapObject.Entity;
				if (((previousValue != value) 
							|| (this._MapObject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MapObject.Entity = null;
						previousValue.MapObjectComments.Remove(this);
					}
					this._MapObject.Entity = value;
					if ((value != null))
					{
						value.MapObjectComments.Add(this);
						this._ObjectID = value.ID;
					}
					else
					{
						this._ObjectID = default(int);
					}
					this.SendPropertyChanged("MapObject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CMSPageSliders")]
	public partial class CMSPageSlider : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private bool _Visible;
		
		private string _Name;
		
		private string _Text;
		
		private int _CMSPageID;
		
		private int _LangID;
		
		private int _ViewID;
		
		private int _OrderNum;
		
		private System.Data.Linq.Binary _Img;
		
		private EntityRef<CMSPageCellView> _CMSPageCellView;
		
		private EntityRef<CMSPage> _CMSPage;
		
		private EntityRef<Language> _Language;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnVisibleChanging(bool value);
    partial void OnVisibleChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnCMSPageIDChanging(int value);
    partial void OnCMSPageIDChanged();
    partial void OnLangIDChanging(int value);
    partial void OnLangIDChanged();
    partial void OnViewIDChanging(int value);
    partial void OnViewIDChanged();
    partial void OnOrderNumChanging(int value);
    partial void OnOrderNumChanged();
    partial void OnImgChanging(System.Data.Linq.Binary value);
    partial void OnImgChanged();
    #endregion
		
		public CMSPageSlider()
		{
			this._CMSPageCellView = default(EntityRef<CMSPageCellView>);
			this._CMSPage = default(EntityRef<CMSPage>);
			this._Language = default(EntityRef<Language>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Visible", DbType="Bit NOT NULL")]
		public bool Visible
		{
			get
			{
				return this._Visible;
			}
			set
			{
				if ((this._Visible != value))
				{
					this.OnVisibleChanging(value);
					this.SendPropertyChanging();
					this._Visible = value;
					this.SendPropertyChanged("Visible");
					this.OnVisibleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CMSPageID", DbType="Int NOT NULL")]
		public int CMSPageID
		{
			get
			{
				return this._CMSPageID;
			}
			set
			{
				if ((this._CMSPageID != value))
				{
					if (this._CMSPage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCMSPageIDChanging(value);
					this.SendPropertyChanging();
					this._CMSPageID = value;
					this.SendPropertyChanged("CMSPageID");
					this.OnCMSPageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LangID", DbType="Int NOT NULL")]
		public int LangID
		{
			get
			{
				return this._LangID;
			}
			set
			{
				if ((this._LangID != value))
				{
					if (this._Language.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLangIDChanging(value);
					this.SendPropertyChanging();
					this._LangID = value;
					this.SendPropertyChanged("LangID");
					this.OnLangIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ViewID", DbType="Int NOT NULL")]
		public int ViewID
		{
			get
			{
				return this._ViewID;
			}
			set
			{
				if ((this._ViewID != value))
				{
					if (this._CMSPageCellView.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnViewIDChanging(value);
					this.SendPropertyChanging();
					this._ViewID = value;
					this.SendPropertyChanged("ViewID");
					this.OnViewIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderNum", DbType="Int NOT NULL")]
		public int OrderNum
		{
			get
			{
				return this._OrderNum;
			}
			set
			{
				if ((this._OrderNum != value))
				{
					this.OnOrderNumChanging(value);
					this.SendPropertyChanging();
					this._OrderNum = value;
					this.SendPropertyChanged("OrderNum");
					this.OnOrderNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Img", DbType="VarBinary(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Img
		{
			get
			{
				return this._Img;
			}
			set
			{
				if ((this._Img != value))
				{
					this.OnImgChanging(value);
					this.SendPropertyChanging();
					this._Img = value;
					this.SendPropertyChanged("Img");
					this.OnImgChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CMSPageCellView_CMSPageSlider", Storage="_CMSPageCellView", ThisKey="ViewID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CMSPageCellView CMSPageCellView
		{
			get
			{
				return this._CMSPageCellView.Entity;
			}
			set
			{
				CMSPageCellView previousValue = this._CMSPageCellView.Entity;
				if (((previousValue != value) 
							|| (this._CMSPageCellView.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CMSPageCellView.Entity = null;
						previousValue.CMSPageSliders.Remove(this);
					}
					this._CMSPageCellView.Entity = value;
					if ((value != null))
					{
						value.CMSPageSliders.Add(this);
						this._ViewID = value.ID;
					}
					else
					{
						this._ViewID = default(int);
					}
					this.SendPropertyChanged("CMSPageCellView");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CMSPage_CMSPageSlider", Storage="_CMSPage", ThisKey="CMSPageID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CMSPage CMSPage
		{
			get
			{
				return this._CMSPage.Entity;
			}
			set
			{
				CMSPage previousValue = this._CMSPage.Entity;
				if (((previousValue != value) 
							|| (this._CMSPage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CMSPage.Entity = null;
						previousValue.CMSPageSliders.Remove(this);
					}
					this._CMSPage.Entity = value;
					if ((value != null))
					{
						value.CMSPageSliders.Add(this);
						this._CMSPageID = value.ID;
					}
					else
					{
						this._CMSPageID = default(int);
					}
					this.SendPropertyChanged("CMSPage");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Language_CMSPageSlider", Storage="_Language", ThisKey="LangID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Language Language
		{
			get
			{
				return this._Language.Entity;
			}
			set
			{
				Language previousValue = this._Language.Entity;
				if (((previousValue != value) 
							|| (this._Language.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Language.Entity = null;
						previousValue.CMSPageSliders.Remove(this);
					}
					this._Language.Entity = value;
					if ((value != null))
					{
						value.CMSPageSliders.Add(this);
						this._LangID = value.ID;
					}
					else
					{
						this._LangID = default(int);
					}
					this.SendPropertyChanged("Language");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MapSelect")]
	public partial class MapSelect : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private decimal _Lat;
		
		private decimal _Lng;
		
		private string _Name;
		
		private int _Zoom;
		
		private bool _Visible;
		
		private int _OrderNum;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnLatChanging(decimal value);
    partial void OnLatChanged();
    partial void OnLngChanging(decimal value);
    partial void OnLngChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnZoomChanging(int value);
    partial void OnZoomChanged();
    partial void OnVisibleChanging(bool value);
    partial void OnVisibleChanged();
    partial void OnOrderNumChanging(int value);
    partial void OnOrderNumChanged();
    #endregion
		
		public MapSelect()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lat", DbType="Decimal(18,12) NOT NULL")]
		public decimal Lat
		{
			get
			{
				return this._Lat;
			}
			set
			{
				if ((this._Lat != value))
				{
					this.OnLatChanging(value);
					this.SendPropertyChanging();
					this._Lat = value;
					this.SendPropertyChanged("Lat");
					this.OnLatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lng", DbType="Decimal(18,12) NOT NULL")]
		public decimal Lng
		{
			get
			{
				return this._Lng;
			}
			set
			{
				if ((this._Lng != value))
				{
					this.OnLngChanging(value);
					this.SendPropertyChanging();
					this._Lng = value;
					this.SendPropertyChanged("Lng");
					this.OnLngChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(512) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zoom", DbType="Int NOT NULL")]
		public int Zoom
		{
			get
			{
				return this._Zoom;
			}
			set
			{
				if ((this._Zoom != value))
				{
					this.OnZoomChanging(value);
					this.SendPropertyChanging();
					this._Zoom = value;
					this.SendPropertyChanged("Zoom");
					this.OnZoomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Visible", DbType="Bit NOT NULL")]
		public bool Visible
		{
			get
			{
				return this._Visible;
			}
			set
			{
				if ((this._Visible != value))
				{
					this.OnVisibleChanging(value);
					this.SendPropertyChanging();
					this._Visible = value;
					this.SendPropertyChanged("Visible");
					this.OnVisibleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderNum", DbType="Int NOT NULL")]
		public int OrderNum
		{
			get
			{
				return this._OrderNum;
			}
			set
			{
				if ((this._OrderNum != value))
				{
					this.OnOrderNumChanging(value);
					this.SendPropertyChanging();
					this._OrderNum = value;
					this.SendPropertyChanged("OrderNum");
					this.OnOrderNumChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserFavoriteLenta")]
	public partial class UserFavoriteLenta : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Guid _UserID;
		
		private int _LentaID;
		
		private EntityRef<User> _User;
		
		private EntityRef<Lenta> _Lenta;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnLentaIDChanging(int value);
    partial void OnLentaIDChanged();
    #endregion
		
		public UserFavoriteLenta()
		{
			this._User = default(EntityRef<User>);
			this._Lenta = default(EntityRef<Lenta>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LentaID", DbType="Int NOT NULL")]
		public int LentaID
		{
			get
			{
				return this._LentaID;
			}
			set
			{
				if ((this._LentaID != value))
				{
					if (this._Lenta.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLentaIDChanging(value);
					this.SendPropertyChanging();
					this._LentaID = value;
					this.SendPropertyChanged("LentaID");
					this.OnLentaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserFavoriteLenta", Storage="_User", ThisKey="UserID", OtherKey="UserId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserFavoriteLentas.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserFavoriteLentas.Add(this);
						this._UserID = value.UserId;
					}
					else
					{
						this._UserID = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lenta_UserFavoriteLenta", Storage="_Lenta", ThisKey="LentaID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Lenta Lenta
		{
			get
			{
				return this._Lenta.Entity;
			}
			set
			{
				Lenta previousValue = this._Lenta.Entity;
				if (((previousValue != value) 
							|| (this._Lenta.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lenta.Entity = null;
						previousValue.UserFavoriteLentas.Remove(this);
					}
					this._Lenta.Entity = value;
					if ((value != null))
					{
						value.UserFavoriteLentas.Add(this);
						this._LentaID = value.ID;
					}
					else
					{
						this._LentaID = default(int);
					}
					this.SendPropertyChanged("Lenta");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserProfiles")]
	public partial class UserProfile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserID;
		
		private string _Name;
		
		private string _Surname;
		
		private string _Patrinomic;
		
		private System.Nullable<int> _FromIP;
		
		private System.Nullable<System.DateTime> _RegDate;
		
		private string _HomePhone;
		
		private string _MobilePhone;
		
		private string _Nick;
		
		private System.Data.Linq.Binary _Avatar;
		
		private System.Nullable<int> _SmokingType;
		
		private string _Town;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnPatrinomicChanging(string value);
    partial void OnPatrinomicChanged();
    partial void OnFromIPChanging(System.Nullable<int> value);
    partial void OnFromIPChanged();
    partial void OnRegDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRegDateChanged();
    partial void OnHomePhoneChanging(string value);
    partial void OnHomePhoneChanged();
    partial void OnMobilePhoneChanging(string value);
    partial void OnMobilePhoneChanged();
    partial void OnNickChanging(string value);
    partial void OnNickChanged();
    partial void OnAvatarChanging(System.Data.Linq.Binary value);
    partial void OnAvatarChanged();
    partial void OnSmokingTypeChanging(System.Nullable<int> value);
    partial void OnSmokingTypeChanged();
    partial void OnTownChanging(string value);
    partial void OnTownChanged();
    #endregion
		
		public UserProfile()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="NVarChar(100)")]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patrinomic", DbType="NVarChar(100)")]
		public string Patrinomic
		{
			get
			{
				return this._Patrinomic;
			}
			set
			{
				if ((this._Patrinomic != value))
				{
					this.OnPatrinomicChanging(value);
					this.SendPropertyChanging();
					this._Patrinomic = value;
					this.SendPropertyChanged("Patrinomic");
					this.OnPatrinomicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromIP", DbType="Int")]
		public System.Nullable<int> FromIP
		{
			get
			{
				return this._FromIP;
			}
			set
			{
				if ((this._FromIP != value))
				{
					this.OnFromIPChanging(value);
					this.SendPropertyChanging();
					this._FromIP = value;
					this.SendPropertyChanged("FromIP");
					this.OnFromIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> RegDate
		{
			get
			{
				return this._RegDate;
			}
			set
			{
				if ((this._RegDate != value))
				{
					this.OnRegDateChanging(value);
					this.SendPropertyChanging();
					this._RegDate = value;
					this.SendPropertyChanged("RegDate");
					this.OnRegDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomePhone", DbType="NVarChar(50)")]
		public string HomePhone
		{
			get
			{
				return this._HomePhone;
			}
			set
			{
				if ((this._HomePhone != value))
				{
					this.OnHomePhoneChanging(value);
					this.SendPropertyChanging();
					this._HomePhone = value;
					this.SendPropertyChanged("HomePhone");
					this.OnHomePhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobilePhone", DbType="NVarChar(50)")]
		public string MobilePhone
		{
			get
			{
				return this._MobilePhone;
			}
			set
			{
				if ((this._MobilePhone != value))
				{
					this.OnMobilePhoneChanging(value);
					this.SendPropertyChanging();
					this._MobilePhone = value;
					this.SendPropertyChanged("MobilePhone");
					this.OnMobilePhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nick", DbType="NVarChar(100)")]
		public string Nick
		{
			get
			{
				return this._Nick;
			}
			set
			{
				if ((this._Nick != value))
				{
					this.OnNickChanging(value);
					this.SendPropertyChanging();
					this._Nick = value;
					this.SendPropertyChanged("Nick");
					this.OnNickChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Avatar", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Avatar
		{
			get
			{
				return this._Avatar;
			}
			set
			{
				if ((this._Avatar != value))
				{
					this.OnAvatarChanging(value);
					this.SendPropertyChanging();
					this._Avatar = value;
					this.SendPropertyChanged("Avatar");
					this.OnAvatarChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SmokingType", DbType="Int")]
		public System.Nullable<int> SmokingType
		{
			get
			{
				return this._SmokingType;
			}
			set
			{
				if ((this._SmokingType != value))
				{
					this.OnSmokingTypeChanging(value);
					this.SendPropertyChanging();
					this._SmokingType = value;
					this.SendPropertyChanged("SmokingType");
					this.OnSmokingTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Town", DbType="NVarChar(200)")]
		public string Town
		{
			get
			{
				return this._Town;
			}
			set
			{
				if ((this._Town != value))
				{
					this.OnTownChanging(value);
					this.SendPropertyChanging();
					this._Town = value;
					this.SendPropertyChanged("Town");
					this.OnTownChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserProfile", Storage="_User", ThisKey="UserID", OtherKey="UserId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserProfile = null;
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserProfile = this;
						this._UserID = value.UserId;
					}
					else
					{
						this._UserID = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserMessages")]
	public partial class UserMessage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Guid _UserID;
		
		private string _Message;
		
		private System.DateTime _Date;
		
		private System.Guid _Sender;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnSenderChanging(System.Guid value);
    partial void OnSenderChanged();
    #endregion
		
		public UserMessage()
		{
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sender", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Sender
		{
			get
			{
				return this._Sender;
			}
			set
			{
				if ((this._Sender != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSenderChanging(value);
					this.SendPropertyChanging();
					this._Sender = value;
					this.SendPropertyChanged("Sender");
					this.OnSenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserMessage", Storage="_User", ThisKey="UserID", OtherKey="UserId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User Recipient
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.IncomingMessages.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.IncomingMessages.Add(this);
						this._UserID = value.UserId;
					}
					else
					{
						this._UserID = default(System.Guid);
					}
					this.SendPropertyChanged("Recipient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserMessage1", Storage="_User1", ThisKey="Sender", OtherKey="UserId", IsForeignKey=true)]
		public User Poster
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.OutcomingMessages.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.OutcomingMessages.Add(this);
						this._Sender = value.UserId;
					}
					else
					{
						this._Sender = default(System.Guid);
					}
					this.SendPropertyChanged("Poster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class getPageListResult
	{
		
		private System.Nullable<int> _ID;
		
		private string _URL;
		
		private System.Nullable<int> _ParentID;
		
		private System.Nullable<bool> _Visible;
		
		private System.Nullable<bool> _ViewMenu;
		
		private System.Nullable<int> _TreeLevel;
		
		private System.Nullable<int> _Type;
		
		private string _FullURL;
		
		private System.Nullable<int> _OrderNum;
		
		private string _BreadCrumbs;
		
		private string _LinkedBreadCrumbs;
		
		private string _PageName;
		
		private string _FullName;
		
		private string _Title;
		
		private string _Keywords;
		
		private string _Description;
		
		public getPageListResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int")]
		public System.Nullable<int> ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_URL", DbType="NVarChar(400)")]
		public string URL
		{
			get
			{
				return this._URL;
			}
			set
			{
				if ((this._URL != value))
				{
					this._URL = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="Int")]
		public System.Nullable<int> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					this._ParentID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Visible", DbType="Bit")]
		public System.Nullable<bool> Visible
		{
			get
			{
				return this._Visible;
			}
			set
			{
				if ((this._Visible != value))
				{
					this._Visible = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ViewMenu", DbType="Bit")]
		public System.Nullable<bool> ViewMenu
		{
			get
			{
				return this._ViewMenu;
			}
			set
			{
				if ((this._ViewMenu != value))
				{
					this._ViewMenu = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TreeLevel", DbType="Int")]
		public System.Nullable<int> TreeLevel
		{
			get
			{
				return this._TreeLevel;
			}
			set
			{
				if ((this._TreeLevel != value))
				{
					this._TreeLevel = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int")]
		public System.Nullable<int> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this._Type = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullURL", DbType="NVarChar(MAX)")]
		public string FullURL
		{
			get
			{
				return this._FullURL;
			}
			set
			{
				if ((this._FullURL != value))
				{
					this._FullURL = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderNum", DbType="Int")]
		public System.Nullable<int> OrderNum
		{
			get
			{
				return this._OrderNum;
			}
			set
			{
				if ((this._OrderNum != value))
				{
					this._OrderNum = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BreadCrumbs", DbType="NVarChar(MAX)")]
		public string BreadCrumbs
		{
			get
			{
				return this._BreadCrumbs;
			}
			set
			{
				if ((this._BreadCrumbs != value))
				{
					this._BreadCrumbs = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LinkedBreadCrumbs", DbType="NVarChar(MAX)")]
		public string LinkedBreadCrumbs
		{
			get
			{
				return this._LinkedBreadCrumbs;
			}
			set
			{
				if ((this._LinkedBreadCrumbs != value))
				{
					this._LinkedBreadCrumbs = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageName", DbType="NVarChar(400) NOT NULL", CanBeNull=false)]
		public string PageName
		{
			get
			{
				return this._PageName;
			}
			set
			{
				if ((this._PageName != value))
				{
					this._PageName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(400) NOT NULL", CanBeNull=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this._FullName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this._Title = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Keywords", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Keywords
		{
			get
			{
				return this._Keywords;
			}
			set
			{
				if ((this._Keywords != value))
				{
					this._Keywords = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
